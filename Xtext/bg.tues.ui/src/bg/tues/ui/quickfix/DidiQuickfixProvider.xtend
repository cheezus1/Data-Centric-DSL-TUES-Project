/*
* generated by Xtext
*/
package bg.tues.ui.quickfix

import bg.tues.didi.DidiModel
import bg.tues.validation.ErrorMessages
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.model.edit.IModification
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.xbase.ui.quickfix.XbaseQuickfixProvider

//import org.eclipse.xtext.ui.editor.quickfix.Fix
//import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
//import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class DidiQuickfixProvider extends XbaseQuickfixProvider {

//	@Fix(MyDslValidator::INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}

	@Fix(ErrorMessages.UNDEFINED_FUNCTION)
	def createFunction(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 
			"Create function '" + issue.data.get(0).toString + "'",
			"Creates a function with the desired name.",
			null,
			new IModification() {
				
				override apply(IModificationContext context) throws Exception {
					var StringBuilder builder = new StringBuilder();
					builder.append("func ");
					builder.append(issue.data.get(0).toString);
					builder.append("() {\n\n}\n\n");
					var xtextDocument = context.xtextDocument;
					xtextDocument.replace(0, 0, builder.toString);
				}
				
			}
		);
	}
	
	@Fix(ErrorMessages.UNDEFINED_VARIABLE)
	def defineLocalVariable(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue,
			"Define local variable '" + issue.data.get(0).toString + "'",
			"Defines a local variable with the desired name.",
			null,
			new IModification() {
				
				override apply(IModificationContext context) throws Exception {
					var xtextDocument = context.xtextDocument;
					var currentLineInformation = xtextDocument.getLineInformation(issue.lineNumber - 1);
					var currentLine = xtextDocument.get(currentLineInformation.offset, 
						currentLineInformation.length
					);
					var numberOfIndentations = currentLine.split("\t").length;
					var StringBuilder lineToBeAdded = new StringBuilder();
					if(numberOfIndentations > 1) {
						for(i : 1 ..< numberOfIndentations) {
							lineToBeAdded.append("\t");
						}
					}
					
					lineToBeAdded.append(issue.data.get(0));
					lineToBeAdded.append(" = \n");
					xtextDocument.replace(currentLineInformation.offset, 0,
						lineToBeAdded.toString);
				}
				
			}
		)
	}
	
	@Fix(ErrorMessages.UNDEFINED_VARIABLE)
	def defineGlobalVariable(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue,
			"Define global variable '" + issue.data.get(0).toString + "'",
			"Defines a global variable with the desired name.",
			null,
			new IModification() {
				
				override apply(IModificationContext context) throws Exception {
					var xtextDocument = context.xtextDocument;
					var currentLineInformation = xtextDocument.getLineInformation(issue.lineNumber - 1);
					var currentLine = xtextDocument.get(currentLineInformation.offset, 
						currentLineInformation.length
					);
					var numberOfIndentations = currentLine.split("\t").length;
					var StringBuilder lineToBeAdded = new StringBuilder();
					if(numberOfIndentations > 1) {
						for(i : 1 ..< numberOfIndentations) {
							lineToBeAdded.append("\t");
						}
					}
					
					lineToBeAdded.append("global ");
					lineToBeAdded.append(issue.data.get(0));
					lineToBeAdded.append(" = \n");
					xtextDocument.replace(currentLineInformation.offset, 0,
						lineToBeAdded.toString);
				}
				
			}
		)
	}
	
	@Fix(ErrorMessages.UNUSED_VARIABLE)
	def removeVariableDefinition(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue,
			"Remove variable definition '" + issue.data.get(0) + "'",
			"Removes the variable definition.",
			null,
			new IModification() {
				
				override apply(IModificationContext context) throws Exception {
					var xtextDocument = context.xtextDocument;
					var currentLineInformation = xtextDocument.getLineInformation(issue.lineNumber - 1);
					xtextDocument.replace(currentLineInformation.offset,
						currentLineInformation.length,
						""
					);
				}
				
			}
		)
	}
	
	@Fix(ErrorMessages.UNUSED_FUNCTION)
	def removeFunctionDefinition(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue,
			"Remove function definition '" + issue.data.get(0) + "'",
			"Removes the function definition.",
			null,
			new ISemanticModification() {
				
				override apply(EObject element, IModificationContext context) throws Exception {
					var didiModelElement = element.eContainer as DidiModel;
					if(didiModelElement.elements.length == 1) {
						var xtextDocument = context.xtextDocument;
						xtextDocument.replace(0, xtextDocument.length, "");
					} else {
						didiModelElement.elements.remove(element);
					}
				}
				
			}
		)
	}

}
