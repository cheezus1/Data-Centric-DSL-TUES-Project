/**
 * generated by Xtext
 */
package bg.tues.ui.quickfix;

import bg.tues.didi.DidiModel;
import bg.tues.didi.Statement;
import bg.tues.validation.ErrorMessages;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.IRegion;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.ui.quickfix.XbaseQuickfixProvider;

/**
 * Custom quickfixes.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
@SuppressWarnings("all")
public class DidiQuickfixProvider extends XbaseQuickfixProvider {
  @Fix(ErrorMessages.UNDEFINED_FUNCTION)
  public void createFunction(final Issue issue, final IssueResolutionAcceptor acceptor) {
    String[] _data = issue.getData();
    String _get = _data[0];
    String _string = _get.toString();
    String _plus = ("Create function \'" + _string);
    String _plus_1 = (_plus + "\'");
    acceptor.accept(issue, _plus_1, 
      "Creates a function with the desired name.", 
      null, 
      new IModification() {
        public void apply(final IModificationContext context) throws Exception {
          StringBuilder builder = new StringBuilder();
          builder.append("func ");
          String[] _data = issue.getData();
          String _get = _data[0];
          String _string = _get.toString();
          builder.append(_string);
          builder.append("() {\n\n}\n\n");
          IXtextDocument xtextDocument = context.getXtextDocument();
          String _string_1 = builder.toString();
          xtextDocument.replace(0, 0, _string_1);
        }
      });
  }
  
  @Fix(ErrorMessages.UNDEFINED_VARIABLE)
  public void defineLocalVariable(final Issue issue, final IssueResolutionAcceptor acceptor) {
    String[] _data = issue.getData();
    String _get = _data[0];
    String _string = _get.toString();
    String _plus = ("Define local variable \'" + _string);
    String _plus_1 = (_plus + "\'");
    acceptor.accept(issue, _plus_1, 
      "Defines a local variable with the desired name.", 
      null, 
      new IModification() {
        public void apply(final IModificationContext context) throws Exception {
          IXtextDocument xtextDocument = context.getXtextDocument();
          Integer _lineNumber = issue.getLineNumber();
          int _minus = ((_lineNumber).intValue() - 1);
          IRegion currentLineInformation = xtextDocument.getLineInformation(_minus);
          int _offset = currentLineInformation.getOffset();
          int _length = currentLineInformation.getLength();
          String currentLine = xtextDocument.get(_offset, _length);
          String[] _split = currentLine.split("\t");
          int numberOfIndentations = _split.length;
          StringBuilder lineToBeAdded = new StringBuilder();
          if ((numberOfIndentations > 1)) {
            ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, numberOfIndentations, true);
            for (final Integer i : _doubleDotLessThan) {
              lineToBeAdded.append("\t");
            }
          }
          String[] _data = issue.getData();
          String _get = _data[0];
          lineToBeAdded.append(_get);
          lineToBeAdded.append(" = \n");
          int _offset_1 = currentLineInformation.getOffset();
          String _string = lineToBeAdded.toString();
          xtextDocument.replace(_offset_1, 0, _string);
        }
      });
  }
  
  @Fix(ErrorMessages.UNDEFINED_VARIABLE)
  public void defineGlobalVariable(final Issue issue, final IssueResolutionAcceptor acceptor) {
    String[] _data = issue.getData();
    String _get = _data[0];
    String _string = _get.toString();
    String _plus = ("Define global variable \'" + _string);
    String _plus_1 = (_plus + "\'");
    acceptor.accept(issue, _plus_1, 
      "Defines a global variable with the desired name.", 
      null, 
      new IModification() {
        public void apply(final IModificationContext context) throws Exception {
          IXtextDocument xtextDocument = context.getXtextDocument();
          Integer _lineNumber = issue.getLineNumber();
          int _minus = ((_lineNumber).intValue() - 1);
          IRegion currentLineInformation = xtextDocument.getLineInformation(_minus);
          int _offset = currentLineInformation.getOffset();
          int _length = currentLineInformation.getLength();
          String currentLine = xtextDocument.get(_offset, _length);
          String[] _split = currentLine.split("\t");
          int numberOfIndentations = _split.length;
          StringBuilder lineToBeAdded = new StringBuilder();
          if ((numberOfIndentations > 1)) {
            ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, numberOfIndentations, true);
            for (final Integer i : _doubleDotLessThan) {
              lineToBeAdded.append("\t");
            }
          }
          lineToBeAdded.append("global ");
          String[] _data = issue.getData();
          String _get = _data[0];
          lineToBeAdded.append(_get);
          lineToBeAdded.append(" = \n");
          int _offset_1 = currentLineInformation.getOffset();
          String _string = lineToBeAdded.toString();
          xtextDocument.replace(_offset_1, 0, _string);
        }
      });
  }
  
  @Fix(ErrorMessages.UNUSED_VARIABLE)
  public void removeVariableDefinition(final Issue issue, final IssueResolutionAcceptor acceptor) {
    String[] _data = issue.getData();
    String _get = _data[0];
    String _plus = ("Remove variable definition \'" + _get);
    String _plus_1 = (_plus + "\'");
    acceptor.accept(issue, _plus_1, 
      "Removes the variable definition.", 
      null, 
      new IModification() {
        public void apply(final IModificationContext context) throws Exception {
          IXtextDocument xtextDocument = context.getXtextDocument();
          Integer _lineNumber = issue.getLineNumber();
          int _minus = ((_lineNumber).intValue() - 1);
          IRegion currentLineInformation = xtextDocument.getLineInformation(_minus);
          int _offset = currentLineInformation.getOffset();
          int _length = currentLineInformation.getLength();
          xtextDocument.replace(_offset, _length, 
            "");
        }
      });
  }
  
  @Fix(ErrorMessages.UNUSED_FUNCTION)
  public void removeFunctionDefinition(final Issue issue, final IssueResolutionAcceptor acceptor) {
    String[] _data = issue.getData();
    String _get = _data[0];
    String _plus = ("Remove function definition \'" + _get);
    String _plus_1 = (_plus + "\'");
    acceptor.accept(issue, _plus_1, 
      "Removes the function definition.", 
      null, 
      new ISemanticModification() {
        public void apply(final EObject element, final IModificationContext context) throws Exception {
          EObject _eContainer = element.eContainer();
          DidiModel didiModelElement = ((DidiModel) _eContainer);
          EList<Statement> _elements = didiModelElement.getElements();
          int _length = ((Object[])Conversions.unwrapArray(_elements, Object.class)).length;
          boolean _equals = (_length == 1);
          if (_equals) {
            IXtextDocument xtextDocument = context.getXtextDocument();
            int _length_1 = xtextDocument.getLength();
            xtextDocument.replace(0, _length_1, "");
          } else {
            EList<Statement> _elements_1 = didiModelElement.getElements();
            _elements_1.remove(element);
          }
        }
      });
  }
}
