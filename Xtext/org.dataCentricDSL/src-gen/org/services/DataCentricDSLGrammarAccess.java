/*
* generated by Xtext
*/
package org.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DataCentricDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DataCentricDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataCentricDSL");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsStatementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//DataCentricDSL:
		//	elements+=Statement*;
		public ParserRule getRule() { return rule; }

		//elements+=Statement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Statement
		public RuleCall getElementsStatementParserRuleCall_0() { return cElementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	SimpleStatement | CompoundStatement;
		public ParserRule getRule() { return rule; }

		//SimpleStatement | CompoundStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleStatement
		public RuleCall getSimpleStatementParserRuleCall_0() { return cSimpleStatementParserRuleCall_0; }

		//CompoundStatement
		public RuleCall getCompoundStatementParserRuleCall_1() { return cCompoundStatementParserRuleCall_1; }
	}

	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVariableDefinitionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cQueryFunctionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cPrintFunctionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cPostfixOperationParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cFunctionCallParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cSemicolonParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SimpleStatement:
		//	(VariableDefinition | QueryFunction | PrintFunction | //	 MultiAssign | 
		//	PostfixOperation | FunctionCall) Semicolon;
		public ParserRule getRule() { return rule; }

		//(VariableDefinition | QueryFunction | PrintFunction | //	 MultiAssign | 
		//PostfixOperation | FunctionCall) Semicolon
		public Group getGroup() { return cGroup; }

		//VariableDefinition | QueryFunction | PrintFunction | //	 MultiAssign | 
		//PostfixOperation | FunctionCall
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//VariableDefinition
		public RuleCall getVariableDefinitionParserRuleCall_0_0() { return cVariableDefinitionParserRuleCall_0_0; }

		//QueryFunction
		public RuleCall getQueryFunctionParserRuleCall_0_1() { return cQueryFunctionParserRuleCall_0_1; }

		//PrintFunction
		public RuleCall getPrintFunctionParserRuleCall_0_2() { return cPrintFunctionParserRuleCall_0_2; }

		////	 MultiAssign | 
		//PostfixOperation
		public RuleCall getPostfixOperationParserRuleCall_0_3() { return cPostfixOperationParserRuleCall_0_3; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_0_4() { return cFunctionCallParserRuleCall_0_4; }

		//Semicolon
		public RuleCall getSemicolonParserRuleCall_1() { return cSemicolonParserRuleCall_1; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsGlobalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIsGlobalGlobalParserRuleCall_0_0 = (RuleCall)cIsGlobalAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOpAssignmentParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cVariableValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableValueVariableParamParserRuleCall_3_0 = (RuleCall)cVariableValueAssignment_3.eContents().get(0);
		
		//VariableDefinition:
		//	isGlobal?=Global? name=IDENTIFIER OpAssignment variableValue=VariableParam;
		public ParserRule getRule() { return rule; }

		//isGlobal?=Global? name=IDENTIFIER OpAssignment variableValue=VariableParam
		public Group getGroup() { return cGroup; }

		//isGlobal?=Global?
		public Assignment getIsGlobalAssignment_0() { return cIsGlobalAssignment_0; }

		//Global
		public RuleCall getIsGlobalGlobalParserRuleCall_0_0() { return cIsGlobalGlobalParserRuleCall_0_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//OpAssignment
		public RuleCall getOpAssignmentParserRuleCall_2() { return cOpAssignmentParserRuleCall_2; }

		//variableValue=VariableParam
		public Assignment getVariableValueAssignment_3() { return cVariableValueAssignment_3; }

		//VariableParam
		public RuleCall getVariableValueVariableParamParserRuleCall_3_0() { return cVariableValueVariableParamParserRuleCall_3_0; }
	}

	public class VariableParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQueryFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VariableParam:
		//	Expression | QueryFunction | BooleanValue;
		public ParserRule getRule() { return rule; }

		//Expression | QueryFunction | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//QueryFunction
		public RuleCall getQueryFunctionParserRuleCall_1() { return cQueryFunctionParserRuleCall_1; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
	}

	public class QueryFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQueryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cQueryParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryParamConditionStatementParserRuleCall_1_0 = (RuleCall)cQueryParamAssignment_1.eContents().get(0);
		
		//QueryFunction:
		//	Query queryParam=ConditionStatement;
		public ParserRule getRule() { return rule; }

		//Query queryParam=ConditionStatement
		public Group getGroup() { return cGroup; }

		//Query
		public RuleCall getQueryParserRuleCall_0() { return cQueryParserRuleCall_0; }

		//queryParam=ConditionStatement
		public Assignment getQueryParamAssignment_1() { return cQueryParamAssignment_1; }

		//ConditionStatement
		public RuleCall getQueryParamConditionStatementParserRuleCall_1_0() { return cQueryParamConditionStatementParserRuleCall_1_0; }
	}

	public class PrintFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrintFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPrintParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cPrintlnParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cPrintParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrintParamPrintParamParserRuleCall_1_0 = (RuleCall)cPrintParamAssignment_1.eContents().get(0);
		
		//PrintFunction:
		//	(Print | Println) printParam=PrintParam;
		public ParserRule getRule() { return rule; }

		//(Print | Println) printParam=PrintParam
		public Group getGroup() { return cGroup; }

		//Print | Println
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Print
		public RuleCall getPrintParserRuleCall_0_0() { return cPrintParserRuleCall_0_0; }

		//Println
		public RuleCall getPrintlnParserRuleCall_0_1() { return cPrintlnParserRuleCall_0_1; }

		//printParam=PrintParam
		public Assignment getPrintParamAssignment_1() { return cPrintParamAssignment_1; }

		//PrintParam
		public RuleCall getPrintParamPrintParamParserRuleCall_1_0() { return cPrintParamPrintParamParserRuleCall_1_0; }
	}

	public class PrintParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrintParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQueryFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrintParam:
		//	QueryFunction | ConditionStatement;
		public ParserRule getRule() { return rule; }

		//QueryFunction | ConditionStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//QueryFunction
		public RuleCall getQueryFunctionParserRuleCall_0() { return cQueryFunctionParserRuleCall_0; }

		//ConditionStatement
		public RuleCall getConditionStatementParserRuleCall_1() { return cConditionStatementParserRuleCall_1; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cOpeningBracketParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cClosingBracketParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	name=IDENTIFIER OpeningBracket (arguments+=Expression (Comma arguments+=Expression)*)? ClosingBracket;
		public ParserRule getRule() { return rule; }

		//name=IDENTIFIER OpeningBracket (arguments+=Expression (Comma arguments+=Expression)*)? ClosingBracket
		public Group getGroup() { return cGroup; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0; }

		//OpeningBracket
		public RuleCall getOpeningBracketParserRuleCall_1() { return cOpeningBracketParserRuleCall_1; }

		//(arguments+=Expression (Comma arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }

		//(Comma arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//Comma
		public RuleCall getCommaParserRuleCall_2_1_0() { return cCommaParserRuleCall_2_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }

		//ClosingBracket
		public RuleCall getClosingBracketParserRuleCall_3() { return cClosingBracketParserRuleCall_3; }
	}

	public class VariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCalledVariableNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCalledVariableNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cCalledVariableNameAssignment_1.eContents().get(0);
		
		//VariableCall:
		//	{VariableCall} calledVariableName=IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//{VariableCall} calledVariableName=IDENTIFIER
		public Group getGroup() { return cGroup; }

		//{VariableCall}
		public Action getVariableCallAction_0() { return cVariableCallAction_0; }

		//calledVariableName=IDENTIFIER
		public Assignment getCalledVariableNameAssignment_1() { return cCalledVariableNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getCalledVariableNameIDENTIFIERTerminalRuleCall_1_0() { return cCalledVariableNameIDENTIFIERTerminalRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Addition;
		public ParserRule getRule() { return rule; }

		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSubstractionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOpAdditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cRightAlternatives_1_2_0 = (Alternatives)cRightAssignment_1_2.eContents().get(0);
		private final RuleCall cRightSubstractionParserRuleCall_1_2_0_0 = (RuleCall)cRightAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cRightStringLiteralParserRuleCall_1_2_0_1 = (RuleCall)cRightAlternatives_1_2_0.eContents().get(1);
		
		//Addition returns Expression:
		//	(Substraction | StringLiteral) ({Addition.left=current} OpAddition right=(Substraction | StringLiteral))*;
		public ParserRule getRule() { return rule; }

		//(Substraction | StringLiteral) ({Addition.left=current} OpAddition right=(Substraction | StringLiteral))*
		public Group getGroup() { return cGroup; }

		//Substraction | StringLiteral
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Substraction
		public RuleCall getSubstractionParserRuleCall_0_0() { return cSubstractionParserRuleCall_0_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_0_1() { return cStringLiteralParserRuleCall_0_1; }

		//({Addition.left=current} OpAddition right=(Substraction | StringLiteral))*
		public Group getGroup_1() { return cGroup_1; }

		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }

		//OpAddition
		public RuleCall getOpAdditionParserRuleCall_1_1() { return cOpAdditionParserRuleCall_1_1; }

		//right=(Substraction | StringLiteral)
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Substraction | StringLiteral
		public Alternatives getRightAlternatives_1_2_0() { return cRightAlternatives_1_2_0; }

		//Substraction
		public RuleCall getRightSubstractionParserRuleCall_1_2_0_0() { return cRightSubstractionParserRuleCall_1_2_0_0; }

		//StringLiteral
		public RuleCall getRightStringLiteralParserRuleCall_1_2_0_1() { return cRightStringLiteralParserRuleCall_1_2_0_1; }
	}

	public class SubstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Substraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSubstractionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOpSubstractionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Substraction returns Expression:
		//	Multiplication ({Substraction.left=current} OpSubstraction right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ({Substraction.left=current} OpSubstraction right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({Substraction.left=current} OpSubstraction right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Substraction.left=current}
		public Action getSubstractionLeftAction_1_0() { return cSubstractionLeftAction_1_0; }

		//OpSubstraction
		public RuleCall getOpSubstractionParserRuleCall_1_1() { return cOpSubstractionParserRuleCall_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOpMultiplicationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDivisionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Division ({Multiplication.left=current} OpMultiplication right=Division)*;
		public ParserRule getRule() { return rule; }

		//Division ({Multiplication.left=current} OpMultiplication right=Division)*
		public Group getGroup() { return cGroup; }

		//Division
		public RuleCall getDivisionParserRuleCall_0() { return cDivisionParserRuleCall_0; }

		//({Multiplication.left=current} OpMultiplication right=Division)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }

		//OpMultiplication
		public RuleCall getOpMultiplicationParserRuleCall_1_1() { return cOpMultiplicationParserRuleCall_1_1; }

		//right=Division
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Division
		public RuleCall getRightDivisionParserRuleCall_1_2_0() { return cRightDivisionParserRuleCall_1_2_0; }
	}

	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDivisionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOpDivisionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightModParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Division returns Expression:
		//	Mod ({Division.left=current} OpDivision right=Mod)*;
		public ParserRule getRule() { return rule; }

		//Mod ({Division.left=current} OpDivision right=Mod)*
		public Group getGroup() { return cGroup; }

		//Mod
		public RuleCall getModParserRuleCall_0() { return cModParserRuleCall_0; }

		//({Division.left=current} OpDivision right=Mod)*
		public Group getGroup_1() { return cGroup_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0() { return cDivisionLeftAction_1_0; }

		//OpDivision
		public RuleCall getOpDivisionParserRuleCall_1_1() { return cOpDivisionParserRuleCall_1_1; }

		//right=Mod
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Mod
		public RuleCall getRightModParserRuleCall_1_2_0() { return cRightModParserRuleCall_1_2_0; }
	}

	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cModLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOpModParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Mod returns Expression:
		//	Primary ({Mod.left=current} OpMod right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({Mod.left=current} OpMod right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Mod.left=current} OpMod right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mod.left=current}
		public Action getModLeftAction_1_0() { return cModLeftAction_1_0; }

		//OpMod
		public RuleCall getOpModParserRuleCall_1_1() { return cOpModParserRuleCall_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cOpeningBracketParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cClosingBracketParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//Primary returns Expression:
		//	NumberLiteral | VariableCall | FunctionCall | OpeningBracket Addition ClosingBracket;
		public ParserRule getRule() { return rule; }

		//NumberLiteral | VariableCall | FunctionCall | OpeningBracket Addition ClosingBracket
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//VariableCall
		public RuleCall getVariableCallParserRuleCall_1() { return cVariableCallParserRuleCall_1; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }

		//OpeningBracket Addition ClosingBracket
		public Group getGroup_3() { return cGroup_3; }

		//OpeningBracket
		public RuleCall getOpeningBracketParserRuleCall_3_0() { return cOpeningBracketParserRuleCall_3_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_3_1() { return cAdditionParserRuleCall_3_1; }

		//ClosingBracket
		public RuleCall getClosingBracketParserRuleCall_3_2() { return cClosingBracketParserRuleCall_3_2; }
	}

	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//CompoundStatement:
		//	FunctionDefinition | IfStatement | //	not supported in Antlr grammar, for now
		//	//	SwitchStatement |
		//	WhileStatement | ForStatement;
		public ParserRule getRule() { return rule; }

		//FunctionDefinition | IfStatement | //	not supported in Antlr grammar, for now
		////	SwitchStatement |
		//WhileStatement | ForStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_0() { return cFunctionDefinitionParserRuleCall_0; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_1() { return cIfStatementParserRuleCall_1; }

		////	not supported in Antlr grammar, for now
		////	SwitchStatement |
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_2() { return cWhileStatementParserRuleCall_2; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_3() { return cForStatementParserRuleCall_3; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFuncParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOpeningBracketParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsIDENTIFIERTerminalRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cCommaParserRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsIDENTIFIERTerminalRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cClosingBracketParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cOpeningCurlyBracketParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cReturnKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cReturnValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cReturnValueConditionStatementParserRuleCall_7_1_0 = (RuleCall)cReturnValueAssignment_7_1.eContents().get(0);
		private final RuleCall cSemicolonParserRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final RuleCall cClosingCurlyBracketParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//FunctionDefinition:
		//	Func name=IDENTIFIER OpeningBracket (arguments+=IDENTIFIER (Comma arguments+=IDENTIFIER)*)? ClosingBracket
		//	OpeningCurlyBracket statements+=Statement* ("return" returnValue=ConditionStatement Semicolon)? ClosingCurlyBracket;
		public ParserRule getRule() { return rule; }

		//Func name=IDENTIFIER OpeningBracket (arguments+=IDENTIFIER (Comma arguments+=IDENTIFIER)*)? ClosingBracket
		//OpeningCurlyBracket statements+=Statement* ("return" returnValue=ConditionStatement Semicolon)? ClosingCurlyBracket
		public Group getGroup() { return cGroup; }

		//Func
		public RuleCall getFuncParserRuleCall_0() { return cFuncParserRuleCall_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//OpeningBracket
		public RuleCall getOpeningBracketParserRuleCall_2() { return cOpeningBracketParserRuleCall_2; }

		//(arguments+=IDENTIFIER (Comma arguments+=IDENTIFIER)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=IDENTIFIER
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//IDENTIFIER
		public RuleCall getArgumentsIDENTIFIERTerminalRuleCall_3_0_0() { return cArgumentsIDENTIFIERTerminalRuleCall_3_0_0; }

		//(Comma arguments+=IDENTIFIER)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//Comma
		public RuleCall getCommaParserRuleCall_3_1_0() { return cCommaParserRuleCall_3_1_0; }

		//arguments+=IDENTIFIER
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//IDENTIFIER
		public RuleCall getArgumentsIDENTIFIERTerminalRuleCall_3_1_1_0() { return cArgumentsIDENTIFIERTerminalRuleCall_3_1_1_0; }

		//ClosingBracket
		public RuleCall getClosingBracketParserRuleCall_4() { return cClosingBracketParserRuleCall_4; }

		//OpeningCurlyBracket
		public RuleCall getOpeningCurlyBracketParserRuleCall_5() { return cOpeningCurlyBracketParserRuleCall_5; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }

		//("return" returnValue=ConditionStatement Semicolon)?
		public Group getGroup_7() { return cGroup_7; }

		//"return"
		public Keyword getReturnKeyword_7_0() { return cReturnKeyword_7_0; }

		//returnValue=ConditionStatement
		public Assignment getReturnValueAssignment_7_1() { return cReturnValueAssignment_7_1; }

		//ConditionStatement
		public RuleCall getReturnValueConditionStatementParserRuleCall_7_1_0() { return cReturnValueConditionStatementParserRuleCall_7_1_0; }

		//Semicolon
		public RuleCall getSemicolonParserRuleCall_7_2() { return cSemicolonParserRuleCall_7_2; }

		//ClosingCurlyBracket
		public RuleCall getClosingCurlyBracketParserRuleCall_8() { return cClosingCurlyBracketParserRuleCall_8; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOpeningBracketParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionStatementParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final RuleCall cClosingBracketParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cOpeningCurlyBracketParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final RuleCall cClosingCurlyBracketParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final RuleCall cElseIfParserRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final RuleCall cOpeningBracketParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cConditionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cConditionConditionStatementParserRuleCall_8_2_0 = (RuleCall)cConditionAssignment_8_2.eContents().get(0);
		private final RuleCall cClosingBracketParserRuleCall_8_3 = (RuleCall)cGroup_8.eContents().get(3);
		private final RuleCall cOpeningCurlyBracketParserRuleCall_8_4 = (RuleCall)cGroup_8.eContents().get(4);
		private final Assignment cStatementsAssignment_8_5 = (Assignment)cGroup_8.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_8_5_0 = (RuleCall)cStatementsAssignment_8_5.eContents().get(0);
		private final RuleCall cClosingCurlyBracketParserRuleCall_8_6 = (RuleCall)cGroup_8.eContents().get(6);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final RuleCall cElseParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final RuleCall cOpeningCurlyBracketParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Assignment cStatementsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_9_2_0 = (RuleCall)cStatementsAssignment_9_2.eContents().get(0);
		private final RuleCall cClosingCurlyBracketParserRuleCall_9_3 = (RuleCall)cGroup_9.eContents().get(3);
		
		//IfStatement:
		//	{IfStatement} If OpeningBracket condition+=ConditionStatement ClosingBracket OpeningCurlyBracket
		//	statements+=Statement* ClosingCurlyBracket (ElseIf OpeningBracket condition+=ConditionStatement ClosingBracket
		//	OpeningCurlyBracket statements+=Statement* ClosingCurlyBracket)* (Else OpeningCurlyBracket statements+=Statement*
		//	ClosingCurlyBracket)?;
		public ParserRule getRule() { return rule; }

		//{IfStatement} If OpeningBracket condition+=ConditionStatement ClosingBracket OpeningCurlyBracket statements+=Statement*
		//ClosingCurlyBracket (ElseIf OpeningBracket condition+=ConditionStatement ClosingBracket OpeningCurlyBracket
		//statements+=Statement* ClosingCurlyBracket)* (Else OpeningCurlyBracket statements+=Statement* ClosingCurlyBracket)?
		public Group getGroup() { return cGroup; }

		//{IfStatement}
		public Action getIfStatementAction_0() { return cIfStatementAction_0; }

		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }

		//OpeningBracket
		public RuleCall getOpeningBracketParserRuleCall_2() { return cOpeningBracketParserRuleCall_2; }

		//condition+=ConditionStatement
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//ConditionStatement
		public RuleCall getConditionConditionStatementParserRuleCall_3_0() { return cConditionConditionStatementParserRuleCall_3_0; }

		//ClosingBracket
		public RuleCall getClosingBracketParserRuleCall_4() { return cClosingBracketParserRuleCall_4; }

		//OpeningCurlyBracket
		public RuleCall getOpeningCurlyBracketParserRuleCall_5() { return cOpeningCurlyBracketParserRuleCall_5; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }

		//ClosingCurlyBracket
		public RuleCall getClosingCurlyBracketParserRuleCall_7() { return cClosingCurlyBracketParserRuleCall_7; }

		//(ElseIf OpeningBracket condition+=ConditionStatement ClosingBracket OpeningCurlyBracket statements+=Statement*
		//ClosingCurlyBracket)*
		public Group getGroup_8() { return cGroup_8; }

		//ElseIf
		public RuleCall getElseIfParserRuleCall_8_0() { return cElseIfParserRuleCall_8_0; }

		//OpeningBracket
		public RuleCall getOpeningBracketParserRuleCall_8_1() { return cOpeningBracketParserRuleCall_8_1; }

		//condition+=ConditionStatement
		public Assignment getConditionAssignment_8_2() { return cConditionAssignment_8_2; }

		//ConditionStatement
		public RuleCall getConditionConditionStatementParserRuleCall_8_2_0() { return cConditionConditionStatementParserRuleCall_8_2_0; }

		//ClosingBracket
		public RuleCall getClosingBracketParserRuleCall_8_3() { return cClosingBracketParserRuleCall_8_3; }

		//OpeningCurlyBracket
		public RuleCall getOpeningCurlyBracketParserRuleCall_8_4() { return cOpeningCurlyBracketParserRuleCall_8_4; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_8_5() { return cStatementsAssignment_8_5; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_5_0() { return cStatementsStatementParserRuleCall_8_5_0; }

		//ClosingCurlyBracket
		public RuleCall getClosingCurlyBracketParserRuleCall_8_6() { return cClosingCurlyBracketParserRuleCall_8_6; }

		//(Else OpeningCurlyBracket statements+=Statement* ClosingCurlyBracket)?
		public Group getGroup_9() { return cGroup_9; }

		//Else
		public RuleCall getElseParserRuleCall_9_0() { return cElseParserRuleCall_9_0; }

		//OpeningCurlyBracket
		public RuleCall getOpeningCurlyBracketParserRuleCall_9_1() { return cOpeningCurlyBracketParserRuleCall_9_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_9_2() { return cStatementsAssignment_9_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_9_2_0() { return cStatementsStatementParserRuleCall_9_2_0; }

		//ClosingCurlyBracket
		public RuleCall getClosingCurlyBracketParserRuleCall_9_3() { return cClosingCurlyBracketParserRuleCall_9_3; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cWhileParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOpeningBracketParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cWhileConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhileConditionConditionStatementParserRuleCall_3_0 = (RuleCall)cWhileConditionAssignment_3.eContents().get(0);
		private final RuleCall cClosingBracketParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cOpeningCurlyBracketParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final RuleCall cClosingCurlyBracketParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		/// *
		//SwitchStatement:
		//	{SwitchStatement}
		//	'switch' OpeningBracket name=VariableCall ClosingBracket OpeningCurlyBracket
		//		('case' cases+=STRING ':'
		//			(statements+=Statement)*
		//		)*
		//		('default' ':'
		//			(statements+=Statement)*
		//		)?
		//	ClosingCurlyBracket
		//;* / WhileStatement:
		//	{WhileStatement} While OpeningBracket whileCondition=ConditionStatement ClosingBracket OpeningCurlyBracket
		//	statements+=Statement* ClosingCurlyBracket;
		public ParserRule getRule() { return rule; }

		//{WhileStatement} While OpeningBracket whileCondition=ConditionStatement ClosingBracket OpeningCurlyBracket
		//statements+=Statement* ClosingCurlyBracket
		public Group getGroup() { return cGroup; }

		//{WhileStatement}
		public Action getWhileStatementAction_0() { return cWhileStatementAction_0; }

		//While
		public RuleCall getWhileParserRuleCall_1() { return cWhileParserRuleCall_1; }

		//OpeningBracket
		public RuleCall getOpeningBracketParserRuleCall_2() { return cOpeningBracketParserRuleCall_2; }

		//whileCondition=ConditionStatement
		public Assignment getWhileConditionAssignment_3() { return cWhileConditionAssignment_3; }

		//ConditionStatement
		public RuleCall getWhileConditionConditionStatementParserRuleCall_3_0() { return cWhileConditionConditionStatementParserRuleCall_3_0; }

		//ClosingBracket
		public RuleCall getClosingBracketParserRuleCall_4() { return cClosingBracketParserRuleCall_4; }

		//OpeningCurlyBracket
		public RuleCall getOpeningCurlyBracketParserRuleCall_5() { return cOpeningCurlyBracketParserRuleCall_5; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }

		//ClosingCurlyBracket
		public RuleCall getClosingCurlyBracketParserRuleCall_7() { return cClosingCurlyBracketParserRuleCall_7; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cForParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOpeningBracketParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cForVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cForVarVariableDefinitionParserRuleCall_3_0 = (RuleCall)cForVarAssignment_3.eContents().get(0);
		private final RuleCall cSemicolonParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cForConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cForConditionConditionStatementParserRuleCall_5_0 = (RuleCall)cForConditionAssignment_5.eContents().get(0);
		private final RuleCall cSemicolonParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cOperationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cOperationAlternatives_7_0 = (Alternatives)cOperationAssignment_7.eContents().get(0);
		private final RuleCall cOperationPostfixOperationParserRuleCall_7_0_0 = (RuleCall)cOperationAlternatives_7_0.eContents().get(0);
		private final RuleCall cOperationVariableDefinitionParserRuleCall_7_0_1 = (RuleCall)cOperationAlternatives_7_0.eContents().get(1);
		private final RuleCall cClosingBracketParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cOpeningCurlyBracketParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cStatementsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatementsStatementParserRuleCall_10_0 = (RuleCall)cStatementsAssignment_10.eContents().get(0);
		private final RuleCall cClosingCurlyBracketParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//ForStatement:
		//	{ForStatement} For OpeningBracket forVar=VariableDefinition Semicolon forCondition=ConditionStatement Semicolon
		//	operation=(PostfixOperation | //ForMultiAssign | 
		//	VariableDefinition) ClosingBracket OpeningCurlyBracket statements+=Statement* ClosingCurlyBracket;
		public ParserRule getRule() { return rule; }

		//{ForStatement} For OpeningBracket forVar=VariableDefinition Semicolon forCondition=ConditionStatement Semicolon
		//operation=(PostfixOperation | //ForMultiAssign | 
		//VariableDefinition) ClosingBracket OpeningCurlyBracket statements+=Statement* ClosingCurlyBracket
		public Group getGroup() { return cGroup; }

		//{ForStatement}
		public Action getForStatementAction_0() { return cForStatementAction_0; }

		//For
		public RuleCall getForParserRuleCall_1() { return cForParserRuleCall_1; }

		//OpeningBracket
		public RuleCall getOpeningBracketParserRuleCall_2() { return cOpeningBracketParserRuleCall_2; }

		//forVar=VariableDefinition
		public Assignment getForVarAssignment_3() { return cForVarAssignment_3; }

		//VariableDefinition
		public RuleCall getForVarVariableDefinitionParserRuleCall_3_0() { return cForVarVariableDefinitionParserRuleCall_3_0; }

		//Semicolon
		public RuleCall getSemicolonParserRuleCall_4() { return cSemicolonParserRuleCall_4; }

		//forCondition=ConditionStatement
		public Assignment getForConditionAssignment_5() { return cForConditionAssignment_5; }

		//ConditionStatement
		public RuleCall getForConditionConditionStatementParserRuleCall_5_0() { return cForConditionConditionStatementParserRuleCall_5_0; }

		//Semicolon
		public RuleCall getSemicolonParserRuleCall_6() { return cSemicolonParserRuleCall_6; }

		//operation=(PostfixOperation | //ForMultiAssign | 
		//VariableDefinition)
		public Assignment getOperationAssignment_7() { return cOperationAssignment_7; }

		//PostfixOperation | //ForMultiAssign | 
		//VariableDefinition
		public Alternatives getOperationAlternatives_7_0() { return cOperationAlternatives_7_0; }

		//PostfixOperation
		public RuleCall getOperationPostfixOperationParserRuleCall_7_0_0() { return cOperationPostfixOperationParserRuleCall_7_0_0; }

		////ForMultiAssign | 
		//VariableDefinition
		public RuleCall getOperationVariableDefinitionParserRuleCall_7_0_1() { return cOperationVariableDefinitionParserRuleCall_7_0_1; }

		//ClosingBracket
		public RuleCall getClosingBracketParserRuleCall_8() { return cClosingBracketParserRuleCall_8; }

		//OpeningCurlyBracket
		public RuleCall getOpeningCurlyBracketParserRuleCall_9() { return cOpeningCurlyBracketParserRuleCall_9; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_10() { return cStatementsAssignment_10; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_10_0() { return cStatementsStatementParserRuleCall_10_0; }

		//ClosingCurlyBracket
		public RuleCall getClosingCurlyBracketParserRuleCall_11() { return cClosingCurlyBracketParserRuleCall_11; }
	}

	public class ConditionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionsConditionParserRuleCall_0_0 = (RuleCall)cConditionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cOpAndParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cOpOrParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Assignment cConditionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_1_1_0 = (RuleCall)cConditionsAssignment_1_1.eContents().get(0);
		
		//ConditionStatement:
		//	conditions+=Condition ((OpAnd | OpOr) conditions+=Condition)*;
		public ParserRule getRule() { return rule; }

		//conditions+=Condition ((OpAnd | OpOr) conditions+=Condition)*
		public Group getGroup() { return cGroup; }

		//conditions+=Condition
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_0_0() { return cConditionsConditionParserRuleCall_0_0; }

		//((OpAnd | OpOr) conditions+=Condition)*
		public Group getGroup_1() { return cGroup_1; }

		//OpAnd | OpOr
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//OpAnd
		public RuleCall getOpAndParserRuleCall_1_0_0() { return cOpAndParserRuleCall_1_0_0; }

		//OpOr
		public RuleCall getOpOrParserRuleCall_1_0_1() { return cOpOrParserRuleCall_1_0_1; }

		//conditions+=Condition
		public Assignment getConditionsAssignment_1_1() { return cConditionsAssignment_1_1; }

		//Condition
		public RuleCall getConditionsConditionParserRuleCall_1_1_0() { return cConditionsConditionParserRuleCall_1_1_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionElementsConditionElementParserRuleCall_0_0 = (RuleCall)cConditionElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpOpCompareParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cConditionElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionElementsConditionElementParserRuleCall_1_1_0 = (RuleCall)cConditionElementsAssignment_1_1.eContents().get(0);
		
		//Condition:
		//	conditionElements+=ConditionElement (op=OpCompare conditionElements+=ConditionElement)?;
		public ParserRule getRule() { return rule; }

		//conditionElements+=ConditionElement (op=OpCompare conditionElements+=ConditionElement)?
		public Group getGroup() { return cGroup; }

		//conditionElements+=ConditionElement
		public Assignment getConditionElementsAssignment_0() { return cConditionElementsAssignment_0; }

		//ConditionElement
		public RuleCall getConditionElementsConditionElementParserRuleCall_0_0() { return cConditionElementsConditionElementParserRuleCall_0_0; }

		//(op=OpCompare conditionElements+=ConditionElement)?
		public Group getGroup_1() { return cGroup_1; }

		//op=OpCompare
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//OpCompare
		public RuleCall getOpOpCompareParserRuleCall_1_0_0() { return cOpOpCompareParserRuleCall_1_0_0; }

		//conditionElements+=ConditionElement
		public Assignment getConditionElementsAssignment_1_1() { return cConditionElementsAssignment_1_1; }

		//ConditionElement
		public RuleCall getConditionElementsConditionElementParserRuleCall_1_1_0() { return cConditionElementsConditionElementParserRuleCall_1_1_0; }
	}

	public class ConditionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConditionElement:
		//	Expression | BooleanValue;
		public ParserRule getRule() { return rule; }

		//Expression | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_1() { return cBooleanValueParserRuleCall_1; }
	}

	public class PostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallVariableCallParserRuleCall_1_0 = (RuleCall)cCallAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpPostfixOperationOperatorParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		
		////ForMultiAssign:
		////	left=VariableCall op=MultiAssignOperator right=INT
		////;
		////
		////MultiAssign:
		////	left=VariableCall op=MultiAssignOperator right=MultiAssignRightOperand 
		////;
		////
		////MultiAssignRightOperand:
		////	(Expression | 
		////	 QueryFunction)
		////;
		//PostfixOperation:
		//	{PostfixOperation} call=VariableCall op=PostfixOperationOperator;
		public ParserRule getRule() { return rule; }

		//{PostfixOperation} call=VariableCall op=PostfixOperationOperator
		public Group getGroup() { return cGroup; }

		//{PostfixOperation}
		public Action getPostfixOperationAction_0() { return cPostfixOperationAction_0; }

		//call=VariableCall
		public Assignment getCallAssignment_1() { return cCallAssignment_1; }

		//VariableCall
		public RuleCall getCallVariableCallParserRuleCall_1_0() { return cCallVariableCallParserRuleCall_1_0; }

		//op=PostfixOperationOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//PostfixOperationOperator
		public RuleCall getOpPostfixOperationOperatorParserRuleCall_2_0() { return cOpPostfixOperationOperatorParserRuleCall_2_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMBER_LITERALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//	value=NUMBER_LITERAL;
		public ParserRule getRule() { return rule; }

		//value=NUMBER_LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NUMBER_LITERAL
		public RuleCall getValueNUMBER_LITERALTerminalRuleCall_0() { return cValueNUMBER_LITERALTerminalRuleCall_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//	value=("true" | "false");
		public ParserRule getRule() { return rule; }

		//value=("true" | "false")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"true" | "false"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}

	public class PostfixOperationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixOperationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// still not supported in Antlr grammar
		////MultiAssignOperator:
		////	('+=' | 
		////	'-=' | 
		////	'*=' | 
		////	'/=' | 
		////	'%=')
		////;
		//PostfixOperationOperator:
		//	"--" | "++";
		public ParserRule getRule() { return rule; }

		//"--" | "++"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_0() { return cHyphenMinusHyphenMinusKeyword_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1() { return cPlusSignPlusSignKeyword_1; }
	}

	public class OpAdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAddition");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAddition:
		//	"+";
		public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class OpSubstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSubstraction");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSubstraction:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class OpMultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiplication");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//OpMultiplication:
		//	"*";
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class OpDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpDivision");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//OpDivision:
		//	"/";
		public ParserRule getRule() { return rule; }

		//"/"
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class OpModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMod");
		private final Keyword cPercentSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpMod:
		//	"%";
		public ParserRule getRule() { return rule; }

		//"%"
		public Keyword getPercentSignKeyword() { return cPercentSignKeyword; }
	}

	public class OpAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAssignment");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAssignment:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OpCompare:
		//	">" | "<" | "==" | "<=" | ">=" | "!=";
		public ParserRule getRule() { return rule; }

		//">" | "<" | "==" | "<=" | ">=" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}

	public class SemicolonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Semicolon");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//Semicolon:
		//	";";
		public ParserRule getRule() { return rule; }

		//";"
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}

	public class OpeningBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpeningBracket");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//OpeningBracket:
		//	"(";
		public ParserRule getRule() { return rule; }

		//"("
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}

	public class ClosingBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosingBracket");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//ClosingBracket:
		//	")";
		public ParserRule getRule() { return rule; }

		//")"
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}

	public class CommaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comma");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//Comma:
		//	",";
		public ParserRule getRule() { return rule; }

		//","
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}

	public class OpeningCurlyBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpeningCurlyBracket");
		private final Keyword cLeftCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//OpeningCurlyBracket:
		//	"{";
		public ParserRule getRule() { return rule; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword() { return cLeftCurlyBracketKeyword; }
	}

	public class ClosingCurlyBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosingCurlyBracket");
		private final Keyword cRightCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//ClosingCurlyBracket:
		//	"}";
		public ParserRule getRule() { return rule; }

		//"}"
		public Keyword getRightCurlyBracketKeyword() { return cRightCurlyBracketKeyword; }
	}

	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Global");
		private final Keyword cGlobalKeyword = (Keyword)rule.eContents().get(1);
		
		//Global:
		//	"global";
		public ParserRule getRule() { return rule; }

		//"global"
		public Keyword getGlobalKeyword() { return cGlobalKeyword; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Keyword cQueryKeyword = (Keyword)rule.eContents().get(1);
		
		//Query:
		//	"query";
		public ParserRule getRule() { return rule; }

		//"query"
		public Keyword getQueryKeyword() { return cQueryKeyword; }
	}

	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Print");
		private final Keyword cPrintKeyword = (Keyword)rule.eContents().get(1);
		
		//Print:
		//	"print";
		public ParserRule getRule() { return rule; }

		//"print"
		public Keyword getPrintKeyword() { return cPrintKeyword; }
	}

	public class PrintlnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Println");
		private final Keyword cPrintlnKeyword = (Keyword)rule.eContents().get(1);
		
		//Println:
		//	"println";
		public ParserRule getRule() { return rule; }

		//"println"
		public Keyword getPrintlnKeyword() { return cPrintlnKeyword; }
	}

	public class FuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Func");
		private final Keyword cFuncKeyword = (Keyword)rule.eContents().get(1);
		
		//Func:
		//	"func";
		public ParserRule getRule() { return rule; }

		//"func"
		public Keyword getFuncKeyword() { return cFuncKeyword; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Keyword cIfKeyword = (Keyword)rule.eContents().get(1);
		
		//If:
		//	"if";
		public ParserRule getRule() { return rule; }

		//"if"
		public Keyword getIfKeyword() { return cIfKeyword; }
	}

	public class ElseIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cElseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIfParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ElseIf:
		//	Else If;
		public ParserRule getRule() { return rule; }

		//Else If
		public Group getGroup() { return cGroup; }

		//Else
		public RuleCall getElseParserRuleCall_0() { return cElseParserRuleCall_0; }

		//If
		public RuleCall getIfParserRuleCall_1() { return cIfParserRuleCall_1; }
	}

	public class ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Else");
		private final Keyword cElseKeyword = (Keyword)rule.eContents().get(1);
		
		//Else:
		//	"else";
		public ParserRule getRule() { return rule; }

		//"else"
		public Keyword getElseKeyword() { return cElseKeyword; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Keyword cWhileKeyword = (Keyword)rule.eContents().get(1);
		
		//While:
		//	"while";
		public ParserRule getRule() { return rule; }

		//"while"
		public Keyword getWhileKeyword() { return cWhileKeyword; }
	}

	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For");
		private final Keyword cForKeyword = (Keyword)rule.eContents().get(1);
		
		//For:
		//	"for";
		public ParserRule getRule() { return rule; }

		//"for"
		public Keyword getForKeyword() { return cForKeyword; }
	}
	
	
	private final DataCentricDSLElements pDataCentricDSL;
	private final StatementElements pStatement;
	private final SimpleStatementElements pSimpleStatement;
	private final VariableDefinitionElements pVariableDefinition;
	private final VariableParamElements pVariableParam;
	private final QueryFunctionElements pQueryFunction;
	private final PrintFunctionElements pPrintFunction;
	private final PrintParamElements pPrintParam;
	private final FunctionCallElements pFunctionCall;
	private final VariableCallElements pVariableCall;
	private final ExpressionElements pExpression;
	private final AdditionElements pAddition;
	private final SubstractionElements pSubstraction;
	private final MultiplicationElements pMultiplication;
	private final DivisionElements pDivision;
	private final ModElements pMod;
	private final PrimaryElements pPrimary;
	private final CompoundStatementElements pCompoundStatement;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final IfStatementElements pIfStatement;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final ConditionStatementElements pConditionStatement;
	private final ConditionElements pCondition;
	private final ConditionElementElements pConditionElement;
	private final PostfixOperationElements pPostfixOperation;
	private final StringLiteralElements pStringLiteral;
	private final NumberLiteralElements pNumberLiteral;
	private final BooleanValueElements pBooleanValue;
	private final PostfixOperationOperatorElements pPostfixOperationOperator;
	private final OpAdditionElements pOpAddition;
	private final OpSubstractionElements pOpSubstraction;
	private final OpMultiplicationElements pOpMultiplication;
	private final OpDivisionElements pOpDivision;
	private final OpModElements pOpMod;
	private final OpAssignmentElements pOpAssignment;
	private final OpAndElements pOpAnd;
	private final OpOrElements pOpOr;
	private final OpCompareElements pOpCompare;
	private final SemicolonElements pSemicolon;
	private final OpeningBracketElements pOpeningBracket;
	private final ClosingBracketElements pClosingBracket;
	private final CommaElements pComma;
	private final OpeningCurlyBracketElements pOpeningCurlyBracket;
	private final ClosingCurlyBracketElements pClosingCurlyBracket;
	private final GlobalElements pGlobal;
	private final QueryElements pQuery;
	private final PrintElements pPrint;
	private final PrintlnElements pPrintln;
	private final FuncElements pFunc;
	private final IfElements pIf;
	private final ElseIfElements pElseIf;
	private final ElseElements pElse;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final TerminalRule tNUMBER_LITERAL;
	private final TerminalRule tIDENTIFIER;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public DataCentricDSLGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pDataCentricDSL = new DataCentricDSLElements();
		this.pStatement = new StatementElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pVariableDefinition = new VariableDefinitionElements();
		this.pVariableParam = new VariableParamElements();
		this.pQueryFunction = new QueryFunctionElements();
		this.pPrintFunction = new PrintFunctionElements();
		this.pPrintParam = new PrintParamElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pVariableCall = new VariableCallElements();
		this.pExpression = new ExpressionElements();
		this.pAddition = new AdditionElements();
		this.pSubstraction = new SubstractionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pDivision = new DivisionElements();
		this.pMod = new ModElements();
		this.pPrimary = new PrimaryElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pIfStatement = new IfStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pConditionStatement = new ConditionStatementElements();
		this.pCondition = new ConditionElements();
		this.pConditionElement = new ConditionElementElements();
		this.pPostfixOperation = new PostfixOperationElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pPostfixOperationOperator = new PostfixOperationOperatorElements();
		this.pOpAddition = new OpAdditionElements();
		this.pOpSubstraction = new OpSubstractionElements();
		this.pOpMultiplication = new OpMultiplicationElements();
		this.pOpDivision = new OpDivisionElements();
		this.pOpMod = new OpModElements();
		this.pOpAssignment = new OpAssignmentElements();
		this.pOpAnd = new OpAndElements();
		this.pOpOr = new OpOrElements();
		this.pOpCompare = new OpCompareElements();
		this.pSemicolon = new SemicolonElements();
		this.pOpeningBracket = new OpeningBracketElements();
		this.pClosingBracket = new ClosingBracketElements();
		this.pComma = new CommaElements();
		this.pOpeningCurlyBracket = new OpeningCurlyBracketElements();
		this.pClosingCurlyBracket = new ClosingCurlyBracketElements();
		this.pGlobal = new GlobalElements();
		this.pQuery = new QueryElements();
		this.pPrint = new PrintElements();
		this.pPrintln = new PrintlnElements();
		this.pFunc = new FuncElements();
		this.pIf = new IfElements();
		this.pElseIf = new ElseIfElements();
		this.pElse = new ElseElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.tNUMBER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER_LITERAL");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.DataCentricDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//DataCentricDSL:
	//	elements+=Statement*;
	public DataCentricDSLElements getDataCentricDSLAccess() {
		return pDataCentricDSL;
	}
	
	public ParserRule getDataCentricDSLRule() {
		return getDataCentricDSLAccess().getRule();
	}

	//Statement:
	//	SimpleStatement | CompoundStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//SimpleStatement:
	//	(VariableDefinition | QueryFunction | PrintFunction | //	 MultiAssign | 
	//	PostfixOperation | FunctionCall) Semicolon;
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}

	//VariableDefinition:
	//	isGlobal?=Global? name=IDENTIFIER OpAssignment variableValue=VariableParam;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return pVariableDefinition;
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	//VariableParam:
	//	Expression | QueryFunction | BooleanValue;
	public VariableParamElements getVariableParamAccess() {
		return pVariableParam;
	}
	
	public ParserRule getVariableParamRule() {
		return getVariableParamAccess().getRule();
	}

	//QueryFunction:
	//	Query queryParam=ConditionStatement;
	public QueryFunctionElements getQueryFunctionAccess() {
		return pQueryFunction;
	}
	
	public ParserRule getQueryFunctionRule() {
		return getQueryFunctionAccess().getRule();
	}

	//PrintFunction:
	//	(Print | Println) printParam=PrintParam;
	public PrintFunctionElements getPrintFunctionAccess() {
		return pPrintFunction;
	}
	
	public ParserRule getPrintFunctionRule() {
		return getPrintFunctionAccess().getRule();
	}

	//PrintParam:
	//	QueryFunction | ConditionStatement;
	public PrintParamElements getPrintParamAccess() {
		return pPrintParam;
	}
	
	public ParserRule getPrintParamRule() {
		return getPrintParamAccess().getRule();
	}

	//FunctionCall:
	//	name=IDENTIFIER OpeningBracket (arguments+=Expression (Comma arguments+=Expression)*)? ClosingBracket;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//VariableCall:
	//	{VariableCall} calledVariableName=IDENTIFIER;
	public VariableCallElements getVariableCallAccess() {
		return pVariableCall;
	}
	
	public ParserRule getVariableCallRule() {
		return getVariableCallAccess().getRule();
	}

	//Expression:
	//	Addition;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Addition returns Expression:
	//	(Substraction | StringLiteral) ({Addition.left=current} OpAddition right=(Substraction | StringLiteral))*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Substraction returns Expression:
	//	Multiplication ({Substraction.left=current} OpSubstraction right=Multiplication)*;
	public SubstractionElements getSubstractionAccess() {
		return pSubstraction;
	}
	
	public ParserRule getSubstractionRule() {
		return getSubstractionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Division ({Multiplication.left=current} OpMultiplication right=Division)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Division returns Expression:
	//	Mod ({Division.left=current} OpDivision right=Mod)*;
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}

	//Mod returns Expression:
	//	Primary ({Mod.left=current} OpMod right=Primary)*;
	public ModElements getModAccess() {
		return pMod;
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}

	//Primary returns Expression:
	//	NumberLiteral | VariableCall | FunctionCall | OpeningBracket Addition ClosingBracket;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//CompoundStatement:
	//	FunctionDefinition | IfStatement | //	not supported in Antlr grammar, for now
	//	//	SwitchStatement |
	//	WhileStatement | ForStatement;
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}

	//FunctionDefinition:
	//	Func name=IDENTIFIER OpeningBracket (arguments+=IDENTIFIER (Comma arguments+=IDENTIFIER)*)? ClosingBracket
	//	OpeningCurlyBracket statements+=Statement* ("return" returnValue=ConditionStatement Semicolon)? ClosingCurlyBracket;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//IfStatement:
	//	{IfStatement} If OpeningBracket condition+=ConditionStatement ClosingBracket OpeningCurlyBracket
	//	statements+=Statement* ClosingCurlyBracket (ElseIf OpeningBracket condition+=ConditionStatement ClosingBracket
	//	OpeningCurlyBracket statements+=Statement* ClosingCurlyBracket)* (Else OpeningCurlyBracket statements+=Statement*
	//	ClosingCurlyBracket)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	/// *
	//SwitchStatement:
	//	{SwitchStatement}
	//	'switch' OpeningBracket name=VariableCall ClosingBracket OpeningCurlyBracket
	//		('case' cases+=STRING ':'
	//			(statements+=Statement)*
	//		)*
	//		('default' ':'
	//			(statements+=Statement)*
	//		)?
	//	ClosingCurlyBracket
	//;* / WhileStatement:
	//	{WhileStatement} While OpeningBracket whileCondition=ConditionStatement ClosingBracket OpeningCurlyBracket
	//	statements+=Statement* ClosingCurlyBracket;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement:
	//	{ForStatement} For OpeningBracket forVar=VariableDefinition Semicolon forCondition=ConditionStatement Semicolon
	//	operation=(PostfixOperation | //ForMultiAssign | 
	//	VariableDefinition) ClosingBracket OpeningCurlyBracket statements+=Statement* ClosingCurlyBracket;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//ConditionStatement:
	//	conditions+=Condition ((OpAnd | OpOr) conditions+=Condition)*;
	public ConditionStatementElements getConditionStatementAccess() {
		return pConditionStatement;
	}
	
	public ParserRule getConditionStatementRule() {
		return getConditionStatementAccess().getRule();
	}

	//Condition:
	//	conditionElements+=ConditionElement (op=OpCompare conditionElements+=ConditionElement)?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//ConditionElement:
	//	Expression | BooleanValue;
	public ConditionElementElements getConditionElementAccess() {
		return pConditionElement;
	}
	
	public ParserRule getConditionElementRule() {
		return getConditionElementAccess().getRule();
	}

	////ForMultiAssign:
	////	left=VariableCall op=MultiAssignOperator right=INT
	////;
	////
	////MultiAssign:
	////	left=VariableCall op=MultiAssignOperator right=MultiAssignRightOperand 
	////;
	////
	////MultiAssignRightOperand:
	////	(Expression | 
	////	 QueryFunction)
	////;
	//PostfixOperation:
	//	{PostfixOperation} call=VariableCall op=PostfixOperationOperator;
	public PostfixOperationElements getPostfixOperationAccess() {
		return pPostfixOperation;
	}
	
	public ParserRule getPostfixOperationRule() {
		return getPostfixOperationAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	value=NUMBER_LITERAL;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//BooleanValue:
	//	value=("true" | "false");
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//// still not supported in Antlr grammar
	////MultiAssignOperator:
	////	('+=' | 
	////	'-=' | 
	////	'*=' | 
	////	'/=' | 
	////	'%=')
	////;
	//PostfixOperationOperator:
	//	"--" | "++";
	public PostfixOperationOperatorElements getPostfixOperationOperatorAccess() {
		return pPostfixOperationOperator;
	}
	
	public ParserRule getPostfixOperationOperatorRule() {
		return getPostfixOperationOperatorAccess().getRule();
	}

	//OpAddition:
	//	"+";
	public OpAdditionElements getOpAdditionAccess() {
		return pOpAddition;
	}
	
	public ParserRule getOpAdditionRule() {
		return getOpAdditionAccess().getRule();
	}

	//OpSubstraction:
	//	"-";
	public OpSubstractionElements getOpSubstractionAccess() {
		return pOpSubstraction;
	}
	
	public ParserRule getOpSubstractionRule() {
		return getOpSubstractionAccess().getRule();
	}

	//OpMultiplication:
	//	"*";
	public OpMultiplicationElements getOpMultiplicationAccess() {
		return pOpMultiplication;
	}
	
	public ParserRule getOpMultiplicationRule() {
		return getOpMultiplicationAccess().getRule();
	}

	//OpDivision:
	//	"/";
	public OpDivisionElements getOpDivisionAccess() {
		return pOpDivision;
	}
	
	public ParserRule getOpDivisionRule() {
		return getOpDivisionAccess().getRule();
	}

	//OpMod:
	//	"%";
	public OpModElements getOpModAccess() {
		return pOpMod;
	}
	
	public ParserRule getOpModRule() {
		return getOpModAccess().getRule();
	}

	//OpAssignment:
	//	"=";
	public OpAssignmentElements getOpAssignmentAccess() {
		return pOpAssignment;
	}
	
	public ParserRule getOpAssignmentRule() {
		return getOpAssignmentAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return pOpAnd;
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return pOpOr;
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//OpCompare:
	//	">" | "<" | "==" | "<=" | ">=" | "!=";
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//Semicolon:
	//	";";
	public SemicolonElements getSemicolonAccess() {
		return pSemicolon;
	}
	
	public ParserRule getSemicolonRule() {
		return getSemicolonAccess().getRule();
	}

	//OpeningBracket:
	//	"(";
	public OpeningBracketElements getOpeningBracketAccess() {
		return pOpeningBracket;
	}
	
	public ParserRule getOpeningBracketRule() {
		return getOpeningBracketAccess().getRule();
	}

	//ClosingBracket:
	//	")";
	public ClosingBracketElements getClosingBracketAccess() {
		return pClosingBracket;
	}
	
	public ParserRule getClosingBracketRule() {
		return getClosingBracketAccess().getRule();
	}

	//Comma:
	//	",";
	public CommaElements getCommaAccess() {
		return pComma;
	}
	
	public ParserRule getCommaRule() {
		return getCommaAccess().getRule();
	}

	//OpeningCurlyBracket:
	//	"{";
	public OpeningCurlyBracketElements getOpeningCurlyBracketAccess() {
		return pOpeningCurlyBracket;
	}
	
	public ParserRule getOpeningCurlyBracketRule() {
		return getOpeningCurlyBracketAccess().getRule();
	}

	//ClosingCurlyBracket:
	//	"}";
	public ClosingCurlyBracketElements getClosingCurlyBracketAccess() {
		return pClosingCurlyBracket;
	}
	
	public ParserRule getClosingCurlyBracketRule() {
		return getClosingCurlyBracketAccess().getRule();
	}

	//Global:
	//	"global";
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}

	//Query:
	//	"query";
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//Print:
	//	"print";
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}

	//Println:
	//	"println";
	public PrintlnElements getPrintlnAccess() {
		return pPrintln;
	}
	
	public ParserRule getPrintlnRule() {
		return getPrintlnAccess().getRule();
	}

	//Func:
	//	"func";
	public FuncElements getFuncAccess() {
		return pFunc;
	}
	
	public ParserRule getFuncRule() {
		return getFuncAccess().getRule();
	}

	//If:
	//	"if";
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//ElseIf:
	//	Else If;
	public ElseIfElements getElseIfAccess() {
		return pElseIf;
	}
	
	public ParserRule getElseIfRule() {
		return getElseIfAccess().getRule();
	}

	//Else:
	//	"else";
	public ElseElements getElseAccess() {
		return pElse;
	}
	
	public ParserRule getElseRule() {
		return getElseAccess().getRule();
	}

	//While:
	//	"while";
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//For:
	//	"for";
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}

	//terminal NUMBER_LITERAL:
	//	"0" | ("1".."9" "0".."9"*) ("." "0".."9"*)?;
	public TerminalRule getNUMBER_LITERALRule() {
		return tNUMBER_LITERAL;
	} 

	//terminal IDENTIFIER:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	} 

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
