/*
* generated by Xtext
*/
package org.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DataCentricDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DataCentricDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataCentricDSL");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cElementsAlternatives_0 = (Alternatives)cElementsAssignment.eContents().get(0);
		private final RuleCall cElementsStatementParserRuleCall_0_0 = (RuleCall)cElementsAlternatives_0.eContents().get(0);
		private final RuleCall cElementsFunctionDeclParserRuleCall_0_1 = (RuleCall)cElementsAlternatives_0.eContents().get(1);
		
		//DataCentricDSL:
		//	elements+=(Statement | FunctionDecl)*;
		public ParserRule getRule() { return rule; }

		//elements+=(Statement | FunctionDecl)*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Statement | FunctionDecl
		public Alternatives getElementsAlternatives_0() { return cElementsAlternatives_0; }

		//Statement
		public RuleCall getElementsStatementParserRuleCall_0_0() { return cElementsStatementParserRuleCall_0_0; }

		//FunctionDecl
		public RuleCall getElementsFunctionDeclParserRuleCall_0_1() { return cElementsFunctionDeclParserRuleCall_0_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompoundStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	SimpleStatement | CompoundStatement;
		public ParserRule getRule() { return rule; }

		//SimpleStatement | CompoundStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleStatement
		public RuleCall getSimpleStatementParserRuleCall_0() { return cSimpleStatementParserRuleCall_0; }

		//CompoundStatement
		public RuleCall getCompoundStatementParserRuleCall_1() { return cCompoundStatementParserRuleCall_1; }
	}

	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVariableDeclParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cQueryParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cPrintParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cMultiAssignParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cPostfixOperationParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cFunctionCallParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SimpleStatement:
		//	(VariableDecl | Query | Print | MultiAssign | PostfixOperation | FunctionCall) ";";
		public ParserRule getRule() { return rule; }

		//(VariableDecl | Query | Print | MultiAssign | PostfixOperation | FunctionCall) ";"
		public Group getGroup() { return cGroup; }

		//VariableDecl | Query | Print | MultiAssign | PostfixOperation | FunctionCall
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//VariableDecl
		public RuleCall getVariableDeclParserRuleCall_0_0() { return cVariableDeclParserRuleCall_0_0; }

		//Query
		public RuleCall getQueryParserRuleCall_0_1() { return cQueryParserRuleCall_0_1; }

		//Print
		public RuleCall getPrintParserRuleCall_0_2() { return cPrintParserRuleCall_0_2; }

		//MultiAssign
		public RuleCall getMultiAssignParserRuleCall_0_3() { return cMultiAssignParserRuleCall_0_3; }

		//PostfixOperation
		public RuleCall getPostfixOperationParserRuleCall_0_4() { return cPostfixOperationParserRuleCall_0_4; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_0_5() { return cFunctionCallParserRuleCall_0_5; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class VariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGlobalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cGlobalGlobalKeyword_0_0 = (Keyword)cGlobalAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cOpAssignmentParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cVariableValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cVariableValueAlternatives_3_0 = (Alternatives)cVariableValueAssignment_3.eContents().get(0);
		private final RuleCall cVariableValueVariableParamParserRuleCall_3_0_0 = (RuleCall)cVariableValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cVariableValueExpressionParserRuleCall_3_0_1 = (RuleCall)cVariableValueAlternatives_3_0.eContents().get(1);
		
		//VariableDecl:
		//	global?="global"? name=ValidID OpAssignment variableValue=(VariableParam | Expression);
		public ParserRule getRule() { return rule; }

		//global?="global"? name=ValidID OpAssignment variableValue=(VariableParam | Expression)
		public Group getGroup() { return cGroup; }

		//global?="global"?
		public Assignment getGlobalAssignment_0() { return cGlobalAssignment_0; }

		//"global"
		public Keyword getGlobalGlobalKeyword_0_0() { return cGlobalGlobalKeyword_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//OpAssignment
		public RuleCall getOpAssignmentParserRuleCall_2() { return cOpAssignmentParserRuleCall_2; }

		//variableValue=(VariableParam | Expression)
		public Assignment getVariableValueAssignment_3() { return cVariableValueAssignment_3; }

		//VariableParam | Expression
		public Alternatives getVariableValueAlternatives_3_0() { return cVariableValueAlternatives_3_0; }

		//VariableParam
		public RuleCall getVariableValueVariableParamParserRuleCall_3_0_0() { return cVariableValueVariableParamParserRuleCall_3_0_0; }

		//Expression
		public RuleCall getVariableValueExpressionParserRuleCall_3_0_1() { return cVariableValueExpressionParserRuleCall_3_0_1; }
	}

	public class OpAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAssignment");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAssignment:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class VariableParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableParamAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVariableStringParamAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVariableStringParamSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cVariableStringParamAssignment_1_0.eContents().get(0);
		private final Assignment cVariableVarParamAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cVariableVarParamVariableCallParserRuleCall_1_1_0 = (RuleCall)cVariableVarParamAssignment_1_1.eContents().get(0);
		private final Assignment cVariableQueryParamAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cVariableQueryParamQueryParserRuleCall_1_2_0 = (RuleCall)cVariableQueryParamAssignment_1_2.eContents().get(0);
		private final Assignment cVariableBolleanValueAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cVariableBolleanValueBolleanValueParserRuleCall_1_3_0 = (RuleCall)cVariableBolleanValueAssignment_1_3.eContents().get(0);
		
		//VariableParam returns VariableDecl:
		//	{VariableParam} (variableStringParam=STRING | variableVarParam=VariableCall | variableQueryParam=Query |
		//	variableBolleanValue=BolleanValue);
		public ParserRule getRule() { return rule; }

		//{VariableParam} (variableStringParam=STRING | variableVarParam=VariableCall | variableQueryParam=Query |
		//variableBolleanValue=BolleanValue)
		public Group getGroup() { return cGroup; }

		//{VariableParam}
		public Action getVariableParamAction_0() { return cVariableParamAction_0; }

		//variableStringParam=STRING | variableVarParam=VariableCall | variableQueryParam=Query |
		//variableBolleanValue=BolleanValue
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//variableStringParam=STRING
		public Assignment getVariableStringParamAssignment_1_0() { return cVariableStringParamAssignment_1_0; }

		//STRING
		public RuleCall getVariableStringParamSTRINGTerminalRuleCall_1_0_0() { return cVariableStringParamSTRINGTerminalRuleCall_1_0_0; }

		//variableVarParam=VariableCall
		public Assignment getVariableVarParamAssignment_1_1() { return cVariableVarParamAssignment_1_1; }

		//VariableCall
		public RuleCall getVariableVarParamVariableCallParserRuleCall_1_1_0() { return cVariableVarParamVariableCallParserRuleCall_1_1_0; }

		//variableQueryParam=Query
		public Assignment getVariableQueryParamAssignment_1_2() { return cVariableQueryParamAssignment_1_2; }

		//Query
		public RuleCall getVariableQueryParamQueryParserRuleCall_1_2_0() { return cVariableQueryParamQueryParserRuleCall_1_2_0; }

		//variableBolleanValue=BolleanValue
		public Assignment getVariableBolleanValueAssignment_1_3() { return cVariableBolleanValueAssignment_1_3; }

		//BolleanValue
		public RuleCall getVariableBolleanValueBolleanValueParserRuleCall_1_3_0() { return cVariableBolleanValueBolleanValueParserRuleCall_1_3_0; }
	}

	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQueryParamParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Query:
		//	"query" QueryParam;
		public ParserRule getRule() { return rule; }

		//"query" QueryParam
		public Group getGroup() { return cGroup; }

		//"query"
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }

		//QueryParam
		public RuleCall getQueryParamParserRuleCall_1() { return cQueryParamParserRuleCall_1; }
	}

	public class QueryParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cQueryValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cQueryValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cQueryValueAssignment_0.eContents().get(0);
		private final RuleCall cVariableCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//QueryParam returns Query:
		//	queryValue=STRING | VariableCall;
		public ParserRule getRule() { return rule; }

		//queryValue=STRING | VariableCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//queryValue=STRING
		public Assignment getQueryValueAssignment_0() { return cQueryValueAssignment_0; }

		//STRING
		public RuleCall getQueryValueSTRINGTerminalRuleCall_0_0() { return cQueryValueSTRINGTerminalRuleCall_0_0; }

		//VariableCall
		public RuleCall getVariableCallParserRuleCall_1() { return cVariableCallParserRuleCall_1; }
	}

	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPrintParamParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Print:
		//	"print" PrintParam;
		public ParserRule getRule() { return rule; }

		//"print" PrintParam
		public Group getGroup() { return cGroup; }

		//"print"
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }

		//PrintParam
		public RuleCall getPrintParamParserRuleCall_1() { return cPrintParamParserRuleCall_1; }
	}

	public class PrintParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrintParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrintValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrintValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cPrintValueAssignment_0.eContents().get(0);
		private final RuleCall cVariableCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrintParam returns Print:
		//	printValue=STRING | VariableCall | Query | Expression;
		public ParserRule getRule() { return rule; }

		//printValue=STRING | VariableCall | Query | Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//printValue=STRING
		public Assignment getPrintValueAssignment_0() { return cPrintValueAssignment_0; }

		//STRING
		public RuleCall getPrintValueSTRINGTerminalRuleCall_0_0() { return cPrintValueSTRINGTerminalRuleCall_0_0; }

		//VariableCall
		public RuleCall getVariableCallParserRuleCall_1() { return cVariableCallParserRuleCall_1; }

		//Query
		public RuleCall getQueryParserRuleCall_2() { return cQueryParserRuleCall_2; }

		//Expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cArgumentsAlternatives_2_0_0 = (Alternatives)cArgumentsAssignment_2_0.eContents().get(0);
		private final RuleCall cArgumentsVariableCallParserRuleCall_2_0_0_0 = (RuleCall)cArgumentsAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cArgumentsStringLiteralParserRuleCall_2_0_0_1 = (RuleCall)cArgumentsAlternatives_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Alternatives cArgumentsAlternatives_2_1_1_0 = (Alternatives)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final RuleCall cArgumentsVariableCallParserRuleCall_2_1_1_0_0 = (RuleCall)cArgumentsAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cArgumentsStringLiteralParserRuleCall_2_1_1_0_1 = (RuleCall)cArgumentsAlternatives_2_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	name=ValidID "(" (arguments+=(VariableCall | StringLiteral) ("," arguments+=(VariableCall | StringLiteral))*)? ")";
		public ParserRule getRule() { return rule; }

		//name=ValidID "(" (arguments+=(VariableCall | StringLiteral) ("," arguments+=(VariableCall | StringLiteral))*)? ")"
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arguments+=(VariableCall | StringLiteral) ("," arguments+=(VariableCall | StringLiteral))*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=(VariableCall | StringLiteral)
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//VariableCall | StringLiteral
		public Alternatives getArgumentsAlternatives_2_0_0() { return cArgumentsAlternatives_2_0_0; }

		//VariableCall
		public RuleCall getArgumentsVariableCallParserRuleCall_2_0_0_0() { return cArgumentsVariableCallParserRuleCall_2_0_0_0; }

		//StringLiteral
		public RuleCall getArgumentsStringLiteralParserRuleCall_2_0_0_1() { return cArgumentsStringLiteralParserRuleCall_2_0_0_1; }

		//("," arguments+=(VariableCall | StringLiteral))*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arguments+=(VariableCall | StringLiteral)
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//VariableCall | StringLiteral
		public Alternatives getArgumentsAlternatives_2_1_1_0() { return cArgumentsAlternatives_2_1_1_0; }

		//VariableCall
		public RuleCall getArgumentsVariableCallParserRuleCall_2_1_1_0_0() { return cArgumentsVariableCallParserRuleCall_2_1_1_0_0; }

		//StringLiteral
		public RuleCall getArgumentsStringLiteralParserRuleCall_2_1_1_0_1() { return cArgumentsStringLiteralParserRuleCall_2_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class VariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableCallValidIDParserRuleCall_1_0 = (RuleCall)cVariableCallAssignment_1.eContents().get(0);
		
		//VariableCall:
		//	{VariableCall} variableCall=ValidID;
		public ParserRule getRule() { return rule; }

		//{VariableCall} variableCall=ValidID
		public Group getGroup() { return cGroup; }

		//{VariableCall}
		public Action getVariableCallAction_0() { return cVariableCallAction_0; }

		//variableCall=ValidID
		public Assignment getVariableCallAssignment_1() { return cVariableCallAssignment_1; }

		//ValidID
		public RuleCall getVariableCallValidIDParserRuleCall_1_0() { return cVariableCallValidIDParserRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Addition;
		public ParserRule getRule() { return rule; }

		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubstractionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSubstractionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//	Substraction ({Addition.left=current} "+" right=Substraction)*;
		public ParserRule getRule() { return rule; }

		//Substraction ({Addition.left=current} "+" right=Substraction)*
		public Group getGroup() { return cGroup; }

		//Substraction
		public RuleCall getSubstractionParserRuleCall_0() { return cSubstractionParserRuleCall_0; }

		//({Addition.left=current} "+" right=Substraction)*
		public Group getGroup_1() { return cGroup_1; }

		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Substraction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Substraction
		public RuleCall getRightSubstractionParserRuleCall_1_2_0() { return cRightSubstractionParserRuleCall_1_2_0; }
	}

	public class SubstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Substraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSubstractionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Substraction returns Expression:
		//	Multiplication ({Substraction.left=current} "-" right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ({Substraction.left=current} "-" right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({Substraction.left=current} "-" right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Substraction.left=current}
		public Action getSubstractionLeftAction_1_0() { return cSubstractionLeftAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightDivisionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Division ({Multiplication.left=current} "*" right=Division)*;
		public ParserRule getRule() { return rule; }

		//Division ({Multiplication.left=current} "*" right=Division)*
		public Group getGroup() { return cGroup; }

		//Division
		public RuleCall getDivisionParserRuleCall_0() { return cDivisionParserRuleCall_0; }

		//({Multiplication.left=current} "*" right=Division)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//right=Division
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Division
		public RuleCall getRightDivisionParserRuleCall_1_2_0() { return cRightDivisionParserRuleCall_1_2_0; }
	}

	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDivisionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightModParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Division returns Expression:
		//	Mod ({Division.left=current} "/" right=Mod)*;
		public ParserRule getRule() { return rule; }

		//Mod ({Division.left=current} "/" right=Mod)*
		public Group getGroup() { return cGroup; }

		//Mod
		public RuleCall getModParserRuleCall_0() { return cModParserRuleCall_0; }

		//({Division.left=current} "/" right=Mod)*
		public Group getGroup_1() { return cGroup_1; }

		//{Division.left=current}
		public Action getDivisionLeftAction_1_0() { return cDivisionLeftAction_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//right=Mod
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Mod
		public RuleCall getRightModParserRuleCall_1_2_0() { return cRightModParserRuleCall_1_2_0; }
	}

	public class ModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cModLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Mod returns Expression:
		//	Primary ({Mod.left=current} "%" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({Mod.left=current} "%" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Mod.left=current} "%" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Mod.left=current}
		public Action getModLeftAction_1_0() { return cModLeftAction_1_0; }

		//"%"
		public Keyword getPercentSignKeyword_1_1() { return cPercentSignKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary returns Expression:
		//	NumberLiteral | "(" Addition ")";
		public ParserRule getRule() { return rule; }

		//NumberLiteral | "(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//"(" Addition ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_1_1() { return cAdditionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompoundStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CompoundStatement:
		//	IfStatement | //	SwitchStatement |
		//	WhileStatement | ForStatement;
		public ParserRule getRule() { return rule; }

		//IfStatement | //	SwitchStatement |
		//WhileStatement | ForStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }

		////	SwitchStatement |
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_1() { return cWhileStatementParserRuleCall_1; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_2() { return cForStatementParserRuleCall_2; }
	}

	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsValidIDParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsValidIDParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FunctionDecl:
		//	"func" name=ValidID "(" (arguments+=ValidID ("," arguments+=ValidID)*)? ")" "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//"func" name=ValidID "(" (arguments+=ValidID ("," arguments+=ValidID)*)? ")" "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=ValidID ("," arguments+=ValidID)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=ValidID
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//ValidID
		public RuleCall getArgumentsValidIDParserRuleCall_3_0_0() { return cArgumentsValidIDParserRuleCall_3_0_0; }

		//("," arguments+=ValidID)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=ValidID
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//ValidID
		public RuleCall getArgumentsValidIDParserRuleCall_3_1_1_0() { return cArgumentsValidIDParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionStatementConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseIfKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cConditionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cConditionStatementConditionParserRuleCall_8_2_0 = (RuleCall)cConditionAssignment_8_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Assignment cStatementsAssignment_8_5 = (Assignment)cGroup_8.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_8_5_0 = (RuleCall)cStatementsAssignment_8_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_6 = (Keyword)cGroup_8.eContents().get(6);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cElseKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cStatementsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_9_2_0 = (RuleCall)cStatementsAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		
		//IfStatement:
		//	{IfStatement} "if" "(" condition+=StatementCondition ")" "{" statements+=Statement* "}" ("else if" "("
		//	condition+=StatementCondition ")" "{" statements+=Statement* "}")* // doesn't work if there is no space after else (xtext bug probably)
		//	("else " "{" statements+=Statement* "}")?;
		public ParserRule getRule() { return rule; }

		//{IfStatement} "if" "(" condition+=StatementCondition ")" "{" statements+=Statement* "}" ("else if" "("
		//condition+=StatementCondition ")" "{" statements+=Statement* "}")* // doesn't work if there is no space after else (xtext bug probably)
		//("else " "{" statements+=Statement* "}")?
		public Group getGroup() { return cGroup; }

		//{IfStatement}
		public Action getIfStatementAction_0() { return cIfStatementAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//condition+=StatementCondition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//StatementCondition
		public RuleCall getConditionStatementConditionParserRuleCall_3_0() { return cConditionStatementConditionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//("else if" "(" condition+=StatementCondition ")" "{" statements+=Statement* "}")*
		public Group getGroup_8() { return cGroup_8; }

		//"else if"
		public Keyword getElseIfKeyword_8_0() { return cElseIfKeyword_8_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }

		//condition+=StatementCondition
		public Assignment getConditionAssignment_8_2() { return cConditionAssignment_8_2; }

		//StatementCondition
		public RuleCall getConditionStatementConditionParserRuleCall_8_2_0() { return cConditionStatementConditionParserRuleCall_8_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_4() { return cLeftCurlyBracketKeyword_8_4; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_8_5() { return cStatementsAssignment_8_5; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_5_0() { return cStatementsStatementParserRuleCall_8_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_6() { return cRightCurlyBracketKeyword_8_6; }

		//("else " "{" statements+=Statement* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"else "
		public Keyword getElseKeyword_9_0() { return cElseKeyword_9_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_9_2() { return cStatementsAssignment_9_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_9_2_0() { return cStatementsStatementParserRuleCall_9_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }
	}

	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameVariableCallParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCaseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCasesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCasesSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cCasesAssignment_6_1.eContents().get(0);
		private final Keyword cColonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cStatementsAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_6_3_0 = (RuleCall)cStatementsAssignment_6_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDefaultKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cColonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cStatementsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_7_2_0 = (RuleCall)cStatementsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SwitchStatement:
		//	{SwitchStatement} "switch" "(" name=VariableCall ")" "{" ("case" cases+=STRING ":" statements+=Statement*)*
		//	("default" ":" statements+=Statement*)? "}";
		public ParserRule getRule() { return rule; }

		//{SwitchStatement} "switch" "(" name=VariableCall ")" "{" ("case" cases+=STRING ":" statements+=Statement*)* ("default"
		//":" statements+=Statement*)? "}"
		public Group getGroup() { return cGroup; }

		//{SwitchStatement}
		public Action getSwitchStatementAction_0() { return cSwitchStatementAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//name=VariableCall
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//VariableCall
		public RuleCall getNameVariableCallParserRuleCall_3_0() { return cNameVariableCallParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//("case" cases+=STRING ":" statements+=Statement*)*
		public Group getGroup_6() { return cGroup_6; }

		//"case"
		public Keyword getCaseKeyword_6_0() { return cCaseKeyword_6_0; }

		//cases+=STRING
		public Assignment getCasesAssignment_6_1() { return cCasesAssignment_6_1; }

		//STRING
		public RuleCall getCasesSTRINGTerminalRuleCall_6_1_0() { return cCasesSTRINGTerminalRuleCall_6_1_0; }

		//":"
		public Keyword getColonKeyword_6_2() { return cColonKeyword_6_2; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_6_3() { return cStatementsAssignment_6_3; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_3_0() { return cStatementsStatementParserRuleCall_6_3_0; }

		//("default" ":" statements+=Statement*)?
		public Group getGroup_7() { return cGroup_7; }

		//"default"
		public Keyword getDefaultKeyword_7_0() { return cDefaultKeyword_7_0; }

		//":"
		public Keyword getColonKeyword_7_1() { return cColonKeyword_7_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_7_2() { return cStatementsAssignment_7_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_7_2_0() { return cStatementsStatementParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWhileConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhileConditionStatementConditionParserRuleCall_3_0 = (RuleCall)cWhileConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//WhileStatement:
		//	{WhileStatement} "while" "(" whileCondition=StatementCondition ")" "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//{WhileStatement} "while" "(" whileCondition=StatementCondition ")" "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//{WhileStatement}
		public Action getWhileStatementAction_0() { return cWhileStatementAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//whileCondition=StatementCondition
		public Assignment getWhileConditionAssignment_3() { return cWhileConditionAssignment_3; }

		//StatementCondition
		public RuleCall getWhileConditionStatementConditionParserRuleCall_3_0() { return cWhileConditionStatementConditionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cForVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cForVarVariableDeclParserRuleCall_3_0 = (RuleCall)cForVarAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cForConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cForConditionStatementConditionParserRuleCall_5_0 = (RuleCall)cForConditionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOperationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cOperationAlternatives_7_0 = (Alternatives)cOperationAssignment_7.eContents().get(0);
		private final RuleCall cOperationPostfixOperationParserRuleCall_7_0_0 = (RuleCall)cOperationAlternatives_7_0.eContents().get(0);
		private final RuleCall cOperationForMultiAssignParserRuleCall_7_0_1 = (RuleCall)cOperationAlternatives_7_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cStatementsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatementsStatementParserRuleCall_10_0 = (RuleCall)cStatementsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ForStatement:
		//	{ForStatement} "for" "(" forVar=VariableDecl ";" forCondition=StatementCondition ";" operation=(PostfixOperation |
		//	ForMultiAssign) ")" "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//{ForStatement} "for" "(" forVar=VariableDecl ";" forCondition=StatementCondition ";" operation=(PostfixOperation |
		//ForMultiAssign) ")" "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//{ForStatement}
		public Action getForStatementAction_0() { return cForStatementAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//forVar=VariableDecl
		public Assignment getForVarAssignment_3() { return cForVarAssignment_3; }

		//VariableDecl
		public RuleCall getForVarVariableDeclParserRuleCall_3_0() { return cForVarVariableDeclParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//forCondition=StatementCondition
		public Assignment getForConditionAssignment_5() { return cForConditionAssignment_5; }

		//StatementCondition
		public RuleCall getForConditionStatementConditionParserRuleCall_5_0() { return cForConditionStatementConditionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//operation=(PostfixOperation | ForMultiAssign)
		public Assignment getOperationAssignment_7() { return cOperationAssignment_7; }

		//PostfixOperation | ForMultiAssign
		public Alternatives getOperationAlternatives_7_0() { return cOperationAlternatives_7_0; }

		//PostfixOperation
		public RuleCall getOperationPostfixOperationParserRuleCall_7_0_0() { return cOperationPostfixOperationParserRuleCall_7_0_0; }

		//ForMultiAssign
		public RuleCall getOperationForMultiAssignParserRuleCall_7_0_1() { return cOperationForMultiAssignParserRuleCall_7_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_10() { return cStatementsAssignment_10; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_10_0() { return cStatementsStatementParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class StatementConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementConditionConditionParserRuleCall_0_0 = (RuleCall)cStatementConditionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cOpAndParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cOpOrParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Assignment cStatementConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementConditionConditionParserRuleCall_1_1_0 = (RuleCall)cStatementConditionAssignment_1_1.eContents().get(0);
		
		//StatementCondition:
		//	statementCondition+=Condition ((OpAnd | OpOr) statementCondition+=Condition)*;
		public ParserRule getRule() { return rule; }

		//statementCondition+=Condition ((OpAnd | OpOr) statementCondition+=Condition)*
		public Group getGroup() { return cGroup; }

		//statementCondition+=Condition
		public Assignment getStatementConditionAssignment_0() { return cStatementConditionAssignment_0; }

		//Condition
		public RuleCall getStatementConditionConditionParserRuleCall_0_0() { return cStatementConditionConditionParserRuleCall_0_0; }

		//((OpAnd | OpOr) statementCondition+=Condition)*
		public Group getGroup_1() { return cGroup_1; }

		//OpAnd | OpOr
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//OpAnd
		public RuleCall getOpAndParserRuleCall_1_0_0() { return cOpAndParserRuleCall_1_0_0; }

		//OpOr
		public RuleCall getOpOrParserRuleCall_1_0_1() { return cOpOrParserRuleCall_1_0_1; }

		//statementCondition+=Condition
		public Assignment getStatementConditionAssignment_1_1() { return cStatementConditionAssignment_1_1; }

		//Condition
		public RuleCall getStatementConditionConditionParserRuleCall_1_1_0() { return cStatementConditionConditionParserRuleCall_1_1_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsConditionElementParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpOpCompareParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsConditionElementParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//Condition:
		//	expressions+=ConditionElement (op+=OpCompare expressions+=ConditionElement)?;
		public ParserRule getRule() { return rule; }

		//expressions+=ConditionElement (op+=OpCompare expressions+=ConditionElement)?
		public Group getGroup() { return cGroup; }

		//expressions+=ConditionElement
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//ConditionElement
		public RuleCall getExpressionsConditionElementParserRuleCall_0_0() { return cExpressionsConditionElementParserRuleCall_0_0; }

		//(op+=OpCompare expressions+=ConditionElement)?
		public Group getGroup_1() { return cGroup_1; }

		//op+=OpCompare
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//OpCompare
		public RuleCall getOpOpCompareParserRuleCall_1_0_0() { return cOpOpCompareParserRuleCall_1_0_0; }

		//expressions+=ConditionElement
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//ConditionElement
		public RuleCall getExpressionsConditionElementParserRuleCall_1_1_0() { return cExpressionsConditionElementParserRuleCall_1_1_0; }
	}

	public class ConditionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConditionElement:
		//	Expression | VariableCall | StringLiteral;
		public ParserRule getRule() { return rule; }

		//Expression | VariableCall | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//VariableCall
		public RuleCall getVariableCallParserRuleCall_1() { return cVariableCallParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }
	}

	public class ForMultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForMultiAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableCallParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpMultiAssignOperatorParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightINTTerminalRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//ForMultiAssign:
		//	left=VariableCall op=MultiAssignOperator right=INT;
		public ParserRule getRule() { return rule; }

		//left=VariableCall op=MultiAssignOperator right=INT
		public Group getGroup() { return cGroup; }

		//left=VariableCall
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//VariableCall
		public RuleCall getLeftVariableCallParserRuleCall_0_0() { return cLeftVariableCallParserRuleCall_0_0; }

		//op=MultiAssignOperator
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//MultiAssignOperator
		public RuleCall getOpMultiAssignOperatorParserRuleCall_1_0() { return cOpMultiAssignOperatorParserRuleCall_1_0; }

		//right=INT
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//INT
		public RuleCall getRightINTTerminalRuleCall_2_0() { return cRightINTTerminalRuleCall_2_0; }
	}

	public class MultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftVariableCallParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpMultiAssignOperatorParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightMultiAssignRightOperandParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//MultiAssign:
		//	left=VariableCall op=MultiAssignOperator right=MultiAssignRightOperand;
		public ParserRule getRule() { return rule; }

		//left=VariableCall op=MultiAssignOperator right=MultiAssignRightOperand
		public Group getGroup() { return cGroup; }

		//left=VariableCall
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//VariableCall
		public RuleCall getLeftVariableCallParserRuleCall_0_0() { return cLeftVariableCallParserRuleCall_0_0; }

		//op=MultiAssignOperator
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//MultiAssignOperator
		public RuleCall getOpMultiAssignOperatorParserRuleCall_1_0() { return cOpMultiAssignOperatorParserRuleCall_1_0; }

		//right=MultiAssignRightOperand
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//MultiAssignRightOperand
		public RuleCall getRightMultiAssignRightOperandParserRuleCall_2_0() { return cRightMultiAssignRightOperandParserRuleCall_2_0; }
	}

	public class MultiAssignRightOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiAssignRightOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//MultiAssignRightOperand:
		//	VariableCall | StringLiteral | Query | NumberLiteral;
		public ParserRule getRule() { return rule; }

		//VariableCall | StringLiteral | Query | NumberLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableCall
		public RuleCall getVariableCallParserRuleCall_0() { return cVariableCallParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//Query
		public RuleCall getQueryParserRuleCall_2() { return cQueryParserRuleCall_2; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_3() { return cNumberLiteralParserRuleCall_3; }
	}

	public class PostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallVariableCallParserRuleCall_1_0 = (RuleCall)cCallAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpPostfixOperationOperatorParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		
		//PostfixOperation:
		//	{PostfixOperation} call=VariableCall op=PostfixOperationOperator;
		public ParserRule getRule() { return rule; }

		//{PostfixOperation} call=VariableCall op=PostfixOperationOperator
		public Group getGroup() { return cGroup; }

		//{PostfixOperation}
		public Action getPostfixOperationAction_0() { return cPostfixOperationAction_0; }

		//call=VariableCall
		public Assignment getCallAssignment_1() { return cCallAssignment_1; }

		//VariableCall
		public RuleCall getCallVariableCallParserRuleCall_1_0() { return cCallVariableCallParserRuleCall_1_0; }

		//op=PostfixOperationOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//PostfixOperationOperator
		public RuleCall getOpPostfixOperationOperatorParserRuleCall_2_0() { return cOpPostfixOperationOperatorParserRuleCall_2_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class BolleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BolleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BolleanValue:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class MultiAssignOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiAssignOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//MultiAssignOperator:
		//	"+=" | "-=" | "*=" | "/=" | "%=";
		public ParserRule getRule() { return rule; }

		//"+=" | "-=" | "*=" | "/=" | "%="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_0() { return cPlusSignEqualsSignKeyword_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_2() { return cAsteriskEqualsSignKeyword_2; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_4() { return cPercentSignEqualsSignKeyword_4; }
	}

	public class PostfixOperationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixOperationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PostfixOperationOperator:
		//	"--" | "++";
		public ParserRule getRule() { return rule; }

		//"--" | "++"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_0() { return cHyphenMinusHyphenMinusKeyword_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1() { return cPlusSignPlusSignKeyword_1; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OpCompare:
		//	">" | "<" | "==" | "<=" | ">=" | "!=";
		public ParserRule getRule() { return rule; }

		//">" | "<" | "==" | "<=" | ">=" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}
	
	
	private final DataCentricDSLElements pDataCentricDSL;
	private final StatementElements pStatement;
	private final SimpleStatementElements pSimpleStatement;
	private final VariableDeclElements pVariableDecl;
	private final OpAssignmentElements pOpAssignment;
	private final VariableParamElements pVariableParam;
	private final QueryElements pQuery;
	private final QueryParamElements pQueryParam;
	private final PrintElements pPrint;
	private final PrintParamElements pPrintParam;
	private final FunctionCallElements pFunctionCall;
	private final VariableCallElements pVariableCall;
	private final ExpressionElements pExpression;
	private final AdditionElements pAddition;
	private final SubstractionElements pSubstraction;
	private final MultiplicationElements pMultiplication;
	private final DivisionElements pDivision;
	private final ModElements pMod;
	private final PrimaryElements pPrimary;
	private final NumberLiteralElements pNumberLiteral;
	private final CompoundStatementElements pCompoundStatement;
	private final FunctionDeclElements pFunctionDecl;
	private final IfStatementElements pIfStatement;
	private final SwitchStatementElements pSwitchStatement;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final StatementConditionElements pStatementCondition;
	private final ConditionElements pCondition;
	private final ConditionElementElements pConditionElement;
	private final ForMultiAssignElements pForMultiAssign;
	private final MultiAssignElements pMultiAssign;
	private final MultiAssignRightOperandElements pMultiAssignRightOperand;
	private final PostfixOperationElements pPostfixOperation;
	private final StringLiteralElements pStringLiteral;
	private final BolleanValueElements pBolleanValue;
	private final MultiAssignOperatorElements pMultiAssignOperator;
	private final PostfixOperationOperatorElements pPostfixOperationOperator;
	private final OpAndElements pOpAnd;
	private final OpOrElements pOpOr;
	private final OpCompareElements pOpCompare;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public DataCentricDSLGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pDataCentricDSL = new DataCentricDSLElements();
		this.pStatement = new StatementElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pVariableDecl = new VariableDeclElements();
		this.pOpAssignment = new OpAssignmentElements();
		this.pVariableParam = new VariableParamElements();
		this.pQuery = new QueryElements();
		this.pQueryParam = new QueryParamElements();
		this.pPrint = new PrintElements();
		this.pPrintParam = new PrintParamElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pVariableCall = new VariableCallElements();
		this.pExpression = new ExpressionElements();
		this.pAddition = new AdditionElements();
		this.pSubstraction = new SubstractionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pDivision = new DivisionElements();
		this.pMod = new ModElements();
		this.pPrimary = new PrimaryElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pIfStatement = new IfStatementElements();
		this.pSwitchStatement = new SwitchStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pStatementCondition = new StatementConditionElements();
		this.pCondition = new ConditionElements();
		this.pConditionElement = new ConditionElementElements();
		this.pForMultiAssign = new ForMultiAssignElements();
		this.pMultiAssign = new MultiAssignElements();
		this.pMultiAssignRightOperand = new MultiAssignRightOperandElements();
		this.pPostfixOperation = new PostfixOperationElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pBolleanValue = new BolleanValueElements();
		this.pMultiAssignOperator = new MultiAssignOperatorElements();
		this.pPostfixOperationOperator = new PostfixOperationOperatorElements();
		this.pOpAnd = new OpAndElements();
		this.pOpOr = new OpOrElements();
		this.pOpCompare = new OpCompareElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.DataCentricDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//DataCentricDSL:
	//	elements+=(Statement | FunctionDecl)*;
	public DataCentricDSLElements getDataCentricDSLAccess() {
		return pDataCentricDSL;
	}
	
	public ParserRule getDataCentricDSLRule() {
		return getDataCentricDSLAccess().getRule();
	}

	//Statement:
	//	SimpleStatement | CompoundStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//SimpleStatement:
	//	(VariableDecl | Query | Print | MultiAssign | PostfixOperation | FunctionCall) ";";
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}

	//VariableDecl:
	//	global?="global"? name=ValidID OpAssignment variableValue=(VariableParam | Expression);
	public VariableDeclElements getVariableDeclAccess() {
		return pVariableDecl;
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}

	//OpAssignment:
	//	"=";
	public OpAssignmentElements getOpAssignmentAccess() {
		return pOpAssignment;
	}
	
	public ParserRule getOpAssignmentRule() {
		return getOpAssignmentAccess().getRule();
	}

	//VariableParam returns VariableDecl:
	//	{VariableParam} (variableStringParam=STRING | variableVarParam=VariableCall | variableQueryParam=Query |
	//	variableBolleanValue=BolleanValue);
	public VariableParamElements getVariableParamAccess() {
		return pVariableParam;
	}
	
	public ParserRule getVariableParamRule() {
		return getVariableParamAccess().getRule();
	}

	//Query:
	//	"query" QueryParam;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//QueryParam returns Query:
	//	queryValue=STRING | VariableCall;
	public QueryParamElements getQueryParamAccess() {
		return pQueryParam;
	}
	
	public ParserRule getQueryParamRule() {
		return getQueryParamAccess().getRule();
	}

	//Print:
	//	"print" PrintParam;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}

	//PrintParam returns Print:
	//	printValue=STRING | VariableCall | Query | Expression;
	public PrintParamElements getPrintParamAccess() {
		return pPrintParam;
	}
	
	public ParserRule getPrintParamRule() {
		return getPrintParamAccess().getRule();
	}

	//FunctionCall:
	//	name=ValidID "(" (arguments+=(VariableCall | StringLiteral) ("," arguments+=(VariableCall | StringLiteral))*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//VariableCall:
	//	{VariableCall} variableCall=ValidID;
	public VariableCallElements getVariableCallAccess() {
		return pVariableCall;
	}
	
	public ParserRule getVariableCallRule() {
		return getVariableCallAccess().getRule();
	}

	//Expression:
	//	Addition;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Addition returns Expression:
	//	Substraction ({Addition.left=current} "+" right=Substraction)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Substraction returns Expression:
	//	Multiplication ({Substraction.left=current} "-" right=Multiplication)*;
	public SubstractionElements getSubstractionAccess() {
		return pSubstraction;
	}
	
	public ParserRule getSubstractionRule() {
		return getSubstractionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Division ({Multiplication.left=current} "*" right=Division)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Division returns Expression:
	//	Mod ({Division.left=current} "/" right=Mod)*;
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}

	//Mod returns Expression:
	//	Primary ({Mod.left=current} "%" right=Primary)*;
	public ModElements getModAccess() {
		return pMod;
	}
	
	public ParserRule getModRule() {
		return getModAccess().getRule();
	}

	//Primary returns Expression:
	//	NumberLiteral | "(" Addition ")";
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//NumberLiteral:
	//	value=INT;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//CompoundStatement:
	//	IfStatement | //	SwitchStatement |
	//	WhileStatement | ForStatement;
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}

	//FunctionDecl:
	//	"func" name=ValidID "(" (arguments+=ValidID ("," arguments+=ValidID)*)? ")" "{" statements+=Statement* "}";
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}

	//IfStatement:
	//	{IfStatement} "if" "(" condition+=StatementCondition ")" "{" statements+=Statement* "}" ("else if" "("
	//	condition+=StatementCondition ")" "{" statements+=Statement* "}")* // doesn't work if there is no space after else (xtext bug probably)
	//	("else " "{" statements+=Statement* "}")?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//SwitchStatement:
	//	{SwitchStatement} "switch" "(" name=VariableCall ")" "{" ("case" cases+=STRING ":" statements+=Statement*)*
	//	("default" ":" statements+=Statement*)? "}";
	public SwitchStatementElements getSwitchStatementAccess() {
		return pSwitchStatement;
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}

	//WhileStatement:
	//	{WhileStatement} "while" "(" whileCondition=StatementCondition ")" "{" statements+=Statement* "}";
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement:
	//	{ForStatement} "for" "(" forVar=VariableDecl ";" forCondition=StatementCondition ";" operation=(PostfixOperation |
	//	ForMultiAssign) ")" "{" statements+=Statement* "}";
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//StatementCondition:
	//	statementCondition+=Condition ((OpAnd | OpOr) statementCondition+=Condition)*;
	public StatementConditionElements getStatementConditionAccess() {
		return pStatementCondition;
	}
	
	public ParserRule getStatementConditionRule() {
		return getStatementConditionAccess().getRule();
	}

	//Condition:
	//	expressions+=ConditionElement (op+=OpCompare expressions+=ConditionElement)?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//ConditionElement:
	//	Expression | VariableCall | StringLiteral;
	public ConditionElementElements getConditionElementAccess() {
		return pConditionElement;
	}
	
	public ParserRule getConditionElementRule() {
		return getConditionElementAccess().getRule();
	}

	//ForMultiAssign:
	//	left=VariableCall op=MultiAssignOperator right=INT;
	public ForMultiAssignElements getForMultiAssignAccess() {
		return pForMultiAssign;
	}
	
	public ParserRule getForMultiAssignRule() {
		return getForMultiAssignAccess().getRule();
	}

	//MultiAssign:
	//	left=VariableCall op=MultiAssignOperator right=MultiAssignRightOperand;
	public MultiAssignElements getMultiAssignAccess() {
		return pMultiAssign;
	}
	
	public ParserRule getMultiAssignRule() {
		return getMultiAssignAccess().getRule();
	}

	//MultiAssignRightOperand:
	//	VariableCall | StringLiteral | Query | NumberLiteral;
	public MultiAssignRightOperandElements getMultiAssignRightOperandAccess() {
		return pMultiAssignRightOperand;
	}
	
	public ParserRule getMultiAssignRightOperandRule() {
		return getMultiAssignRightOperandAccess().getRule();
	}

	//PostfixOperation:
	//	{PostfixOperation} call=VariableCall op=PostfixOperationOperator;
	public PostfixOperationElements getPostfixOperationAccess() {
		return pPostfixOperation;
	}
	
	public ParserRule getPostfixOperationRule() {
		return getPostfixOperationAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BolleanValue:
	//	"true" | "false";
	public BolleanValueElements getBolleanValueAccess() {
		return pBolleanValue;
	}
	
	public ParserRule getBolleanValueRule() {
		return getBolleanValueAccess().getRule();
	}

	//MultiAssignOperator:
	//	"+=" | "-=" | "*=" | "/=" | "%=";
	public MultiAssignOperatorElements getMultiAssignOperatorAccess() {
		return pMultiAssignOperator;
	}
	
	public ParserRule getMultiAssignOperatorRule() {
		return getMultiAssignOperatorAccess().getRule();
	}

	//PostfixOperationOperator:
	//	"--" | "++";
	public PostfixOperationOperatorElements getPostfixOperationOperatorAccess() {
		return pPostfixOperationOperator;
	}
	
	public ParserRule getPostfixOperationOperatorRule() {
		return getPostfixOperationOperatorAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return pOpAnd;
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return pOpOr;
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//OpCompare:
	//	">" | "<" | "==" | "<=" | ">=" | "!=";
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
