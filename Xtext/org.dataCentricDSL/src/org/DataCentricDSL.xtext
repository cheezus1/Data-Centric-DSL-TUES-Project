grammar org.DataCentricDSL with org.eclipse.xtext.xbase.Xbase

generate dataCentricDSL "http://www.DataCentricDSL.org"

DataCentricDSL:
	(elements += Statement)*
;

Statement:
	SimpleStatement | CompoundStatement
;

SimpleStatement:
	(VariableDecl | Query | Print | MultiAssign | PostfixOperation) ';'
;

VariableDecl:
	name=ValidID OpAssignment variableValue=(VariableParam | Expression)
;

OpAssignment:
	'='
;

VariableParam returns VariableDecl:
	{VariableParam} (variableStringParam=STRING | variableVarParam=VariableCall | variableQueryParam=Query)
;

Query:
	'query' QueryParam
;

QueryParam returns Query:
	(queryValue=STRING | VariableCall)
;

Print:
	'print' PrintParam
;

PrintParam returns Print:
	(printValue=STRING | VariableCall | Query | Expression)
;

VariableCall:
	{VariableCall} variableCall=ValidID
;

Expression:
	Addition
;

Addition returns Expression:
	Substraction ({Addition.left=current} '+' right=Substraction)*
;

Substraction returns Expression:
	Multiplication ({Substraction.left=current} '-' right=Multiplication)*
;

Multiplication returns Expression:
	Division ({Multiplication.left=current} '*' right=Division)*
;
 
Division returns Expression:
	Mod ({Division.left=current} '/' right=Mod)*
;

Mod returns Expression:
	Primary ({Mod.left=current} '%' right=Primary)*
;

Primary returns Expression:
	NumberLiteral | '(' Addition ')'
;

NumberLiteral:
	value=INT
;

CompoundStatement:
	IfStatement |
	SwitchStatement |
	WhileStatement |
	ForStatement
;

IfStatement:
	{IfStatement}
	'if' '(' condition += StatementCondition ')' '{'
		(statements+=Statement)*
	'}'
	( 'else if' '(' condition+=StatementCondition ')' '{'
		(statements+=Statement)*
	'}'
	)*
	// doesn't work if there is no space after else (xtext bug probably)
	( 'else ' '{' 
		(statements+=Statement)*
	'}'
	)?
;

SwitchStatement:
	{SwitchStatement}
	'switch' '(' name=VariableCall ')' '{'
		('case' cases+=STRING ':'
			(statements+=Statement)*
		)*
		('default' ':'
			(statements+=Statement)*
		)?
	'}'
;

WhileStatement:
	'while' '(' StatementCondition ')' '{' (statements+=Statement)* '}'
;

ForStatement:
	'for' '(' VariableDecl ';' forCondition=StatementCondition ';' operation=(PostfixOperation | ForMultiAssign) ')' '{' (statements+=Statement)* '}'
;

StatementCondition:
	statementCondition+=Condition ((OpAnd | OpOr) statementCondition+=Condition)* 
;

Condition:
	 expressions+=ConditionElement (op+=OpCompare expressions+=ConditionElement)*
;

ConditionElement:
	(Expression | VariableCall | STRING)
;

ForMultiAssign:
	left=VariableCall op=MultiAssignOperator right=INT
;

MultiAssign:
	left=VariableCall op=MultiAssignOperator right=MultiAssignRightOperand 
;

MultiAssignRightOperand:
	(VariableCall | STRING | Query | INT)
;

PostfixOperation:
	VariableCall op=PostfixOperationOperator
;

MultiAssignOperator:
	('+=' | 
	'-=' | 
	'*=' | 
	'/=' | 
	'%=')
;
PostfixOperationOperator:
	('--' |
	'++')
;
OpAnd: '&&';
OpOr: '||';
OpCompare:
	('>' |
	'<' |
	'==' |
	'<=' |
	'>=' |
	'!=')
;
