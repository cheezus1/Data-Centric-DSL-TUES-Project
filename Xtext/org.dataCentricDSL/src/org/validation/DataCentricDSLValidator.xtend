/*
 * generated by Xtext
 */
package org.validation

import org.dataCentricDSL.BooleanValue
import org.dataCentricDSL.Condition
import org.dataCentricDSL.ConditionStatement
import org.dataCentricDSL.DataCentricDSL
import org.dataCentricDSL.DataCentricDSLPackage
import org.dataCentricDSL.ForStatement
import org.dataCentricDSL.FunctionCall
import org.dataCentricDSL.FunctionDefinition
import org.dataCentricDSL.IfStatement
import org.dataCentricDSL.QueryFunction
import org.dataCentricDSL.VariableCall
import org.dataCentricDSL.VariableDefinition
import org.dataCentricDSL.WhileStatement
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check

import static org.validation.ValidationUtils.*

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DataCentricDSLValidator extends AbstractDataCentricDSLValidator {
	
	@Check
	def void checkQueryParameter(QueryFunction qf) {
		var expression = qf.queryParam as ConditionStatement;
		var condition = expression.conditions.get(0) as Condition;
		
		if(expression.conditions.length == 1 
			&& condition.conditionElements.length == 1 
			&& !(condition.conditionElements.get(0) instanceof BooleanValue)
		) {
			return;
		}
		
		error(ErrorMessages.QUERY_FUNCTION_PARAMETER_BOOLEAN_EXPRESSION, 
			DataCentricDSLPackage.Literals::QUERY_FUNCTION__QUERY_PARAM
		);
	}
	
	@Check
	def void checkFunctionDeclarationPosition(FunctionDefinition fd) {
		if(!(fd.eContainer instanceof DataCentricDSL)) {
			error(ErrorMessages.FUNCTION_WITHIN_BLOCK_STATEMENT,
				DataCentricDSLPackage.Literals::FUNCTION_DEFINITION__NAME
			);
			return;
			
		} else {
			if(!ValidationUtils.functionIsDeclaredBeforeTheCode(fd)) {
				error(ErrorMessages.FUNCTIONS_BEGINNING_OF_CODE,
					DataCentricDSLPackage.Literals::FUNCTION_DEFINITION__NAME
				);
				return;
			}
			
			if(ValidationUtils.functionWithTheSameNameExists(fd)) {
				error(ErrorMessages.FUNCTION_SAME_NAME,
					DataCentricDSLPackage.Literals::FUNCTION_DEFINITION__NAME
				);
				return;
			}
		}
	}
	
	@Check
	def void checkConditionElementCompatibility(Condition c) {
 		if(c.conditionElements.length > 1) {
			var leftOperand = c.conditionElements.get(0);
			var rightOperand = c.conditionElements.get(1);
			var errorMessage = ValidationUtils
								.operandsCOmpatibilityErrorMessage(leftOperand,
									rightOperand,
									c.op
								);
			
			if(errorMessage != null) {
				if(errorMessage.contains("operator")) {
					error(errorMessage, 
						DataCentricDSLPackage.Literals::CONDITION__OP
					);
				} else {
					error(errorMessage, 
						DataCentricDSLPackage.Literals::CONDITION__CONDITION_ELEMENTS
					);
				}	
			}
		}
	}
	
	@Check
	def void checkIfCalledFunctionExistsAndMatchesArguments(FunctionCall fc) {
		var container = ValidationUtils.getDataCentricDSLContainer(fc);
		
		val elements = container.eContents.toArray.filter(typeof(FunctionDefinition));
		if(ValidationUtils.functionIsDeclared(elements, fc.name)) {
			return;
		}
		
		error(ErrorMessages.UNDEFINED_FUNCTION, 
			DataCentricDSLPackage.Literals::FUNCTION_CALL__NAME,
			ErrorMessages.UNDEFINED_FUNCTION,
			fc.name
		);
	}
	
	@Check
	def void checkIfCalledFunctionArgumentsCountMatches(FunctionCall fc) {
		var container = ValidationUtils.getDataCentricDSLContainer(fc);
		
		var elements = container.eContents.toArray.filter(typeof(FunctionDefinition));
		if(ValidationUtils.functionIsDeclared(elements, fc.name)) {
			for(i : 0..< elements.length) {
				if(elements.get(i).name.equals(fc.name) 
					&& elements.get(i).arguments.length == fc.arguments.length
				) {
					if(!ValidationUtils.functionIsDeclaredBeforeTheCode(elements.get(i))) {
						error(ErrorMessages.UNDEFINED_FUNCTION, 
							DataCentricDSLPackage.Literals::FUNCTION_CALL__NAME,
							ErrorMessages.UNDEFINED_FUNCTION,
							fc.name
						);
					}
					return;		
				}
			}
			
			error(ErrorMessages.FUNCTION_CALL_ARGUMENTS_MISMATCH,
				DataCentricDSLPackage.Literals::FUNCTION_CALL__ARGUMENTS
			);
		}
	}
	
	@Check
	def void checkIfAssignedVariableExists(VariableCall vc) {
		var container = vc.eContainer;
		var VariableDefinition[] variables = null;
		var EObject containerElement = vc.eContainer;
		var int containerElementIndex;
		while(!(container instanceof DataCentricDSL)) {
			container = container.eContainer;
			
			if(container instanceof IfStatement || container instanceof ForStatement
				|| container instanceof WhileStatement || container instanceof FunctionDefinition) {
				
				if(container instanceof ForStatement) {
					var DeclaratedVar = (container as ForStatement).forVar;
					if(DeclaratedVar.name.toString.equals(vc.calledVariableName.toString)) {
						return;
					}
				}
				if(container instanceof FunctionDefinition) {
					if(ValidationUtils
						.namePersistsInArray((container as FunctionDefinition).arguments,
							vc.calledVariableName
						)) {
						return;
					}
				}
				containerElementIndex = container.eContents.indexOf(containerElement);
				variables = container.eContents.subList(0, containerElementIndex).toArray.filter(typeof(VariableDefinition));
				if(ValidationUtils.variableIsDeclared(variables, vc.calledVariableName)) {
					return;
				}
				variables = null;
			}
			if(!(containerElement.eContainer instanceof DataCentricDSL)) {
				containerElement = containerElement.eContainer;
			}
		}
		containerElementIndex = container.eContents.indexOf(containerElement);
		variables = container.eContents.subList(0, containerElementIndex).toArray.filter(typeof(VariableDefinition));
		if(ValidationUtils.variableIsDeclared(variables, vc.calledVariableName)) {
			return;
		}
		ValidationUtils.checkIfCalledVariableIsGlobal(container, vc.calledVariableName, containerElementIndex);
		if(!ValidationUtils.globalVariableFound) {
			error(ErrorMessages.UNDEFINED_VARIABLE, 
				DataCentricDSLPackage.Literals::VARIABLE_CALL__CALLED_VARIABLE_NAME,
				ErrorMessages.UNDEFINED_VARIABLE,
				vc.calledVariableName
			);
		}
		ValidationUtils.globalVariableFound = false;
	}
	
	@Check
	def void checkIfVariableIsUsed(VariableDefinition vd) {
		if(vd.eContainer instanceof ForStatement) {
			if(vd.eContainer.eContents.indexOf(vd) == 1) {
				return;
			}
		}
		var positionInContainer = vd.eContainer.eContents.indexOf(vd) + 1;
		var listFromPosition = vd.eContainer.eContents.subList(positionInContainer, vd.eContainer.eContents.length);
		ValidationUtils.checkIfVariableIsUsed(listFromPosition, vd.name);
		if(!ValidationUtils.variableIsUsed) {
			warning("Variable is never used.",
				DataCentricDSLPackage.Literals.VARIABLE_DEFINITION__NAME
			);
		}
		ValidationUtils.variableIsUsed = false;
 	}
	
}