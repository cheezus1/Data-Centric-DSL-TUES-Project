/*
 * generated by Xtext
 */
package org.validation

import org.dataCentricDSL.Condition
import org.dataCentricDSL.DataCentricDSL
import org.dataCentricDSL.DataCentricDSLPackage
import org.dataCentricDSL.ForStatement
import org.dataCentricDSL.FunctionCall
import org.dataCentricDSL.FunctionDecl
import org.dataCentricDSL.IfStatement
import org.dataCentricDSL.NumberLiteral
import org.dataCentricDSL.Query
import org.dataCentricDSL.StringLiteral
import org.dataCentricDSL.VariableCall
import org.dataCentricDSL.VariableDecl
import org.dataCentricDSL.WhileStatement
import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DataCentricDSLValidator extends AbstractDataCentricDSLValidator {
	
	@Check
	def void checkIfQueryStringIsEmpty(Query que){
		if(que.queryValue.toString.equals("")){
			error("Query string cannot be empty.", DataCentricDSLPackage.Literals::QUERY__QUERY_VALUE);
		}
	}
	
	@Check
	def void checkConditionOperands(Condition c) {
		var leftOperand = c.expressions.get(0);
		var rightOperand = c.expressions.get(1);
		if(leftOperand instanceof NumberLiteral) {
			if(!(rightOperand instanceof NumberLiteral)) {
				error("Operands of incompatible types.", DataCentricDSLPackage.Literals::CONDITION__EXPRESSIONS)
			}
		}
		if(leftOperand instanceof StringLiteral) {
			if(!(rightOperand instanceof StringLiteral)) {
				error("Operands of incompatible types.", DataCentricDSLPackage.Literals::CONDITION__EXPRESSIONS)
			}
		}
	}
	
	@Check
	def void checkIfCalledFunctionExists(FunctionCall fc) {
		var container = fc.eContainer;
		while(!(container instanceof DataCentricDSL)) {
			container = container.eContainer;
		}
		
		val Elements = (container as DataCentricDSL).elements.toArray.filter(typeof(FunctionDecl));
		if(functionIsDeclared(Elements, fc.name)) {
			return;
		}
		
		error("Undefined function.", DataCentricDSLPackage.Literals::FUNCTION_CALL__NAME);
	}
	
	@Check
	def void checkIfAssignedVariableExists(VariableCall vc) {
		var container = vc.eContainer;
		var VariableDecl[] variables = null;
		while(!(container instanceof DataCentricDSL)) {
			container = container.eContainer;
			
			if(container instanceof IfStatement) {
				variables = (container as IfStatement).statements.toArray.filter(typeof(VariableDecl));
			} else if(container instanceof ForStatement) {
				variables = (container as ForStatement).statements.toArray.filter(typeof(VariableDecl));
				var DeclaratedVar = (container as ForStatement).forVar;
				if(DeclaratedVar.name.toString.equals(vc.variableCall.toString)) {
					return;
				}
			} else if(container instanceof WhileStatement) {
				variables = (container as WhileStatement).statements.toArray.filter(typeof(VariableDecl));
			}
			if(variableIsDeclared(variables, vc.variableCall)) {
				return;
			}
			variables = null;
		}
		variables = (container as DataCentricDSL).elements.toArray.filter(typeof(VariableDecl));
		if(variableIsDeclared(variables, vc.variableCall)) {
			return;
		}
		error("Undefined variable.", DataCentricDSLPackage.Literals::VARIABLE_CALL__VARIABLE_CALL);
	}

	def boolean variableIsDeclared(VariableDecl[] variables, String name) {
		if(variables != null) {
			for(i : 0..< variables.length) {
				if(variables.get(i).name.toString.equals(name)) {
					return true;
				}
			}
		}
		return false;
	}
	
	def boolean functionIsDeclared(FunctionDecl[] functions, String name) {
		for(i : 0..< functions.length) {
			if(functions.get(i).name.toString.equals(name)) {
				return true;
			}
		}
		return false;
	}
}