/*
 * generated by Xtext
 */
package org.validation

import org.eclipse.xtext.validation.Check
import org.dataCentricDSL.DataCentricDSLPackage
import org.dataCentricDSL.Function

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DataCentricDSLValidator extends AbstractDataCentricDSLValidator {
	
	@Check
	def checkIfQueryIsEmpty(org.dataCentricDSL.Query que){
		if(que.queryParams.toString.equals("[]")){
			error("Query string cannot be empty.", DataCentricDSLPackage$Literals::QUERY__QUERY_PARAMS);
		}
	}
	
	@Check
	def checkIfFunctionParametersAreUnique(Function fun){
		val Array = fun.params.toArray
		for(i : 0..< Array.length) {
			for(i1 : 1..< Array.length) {
				if(i != i1){ // does not work with &&...
					if(Array.get(i).toString.equals(Array.get(i1).toString)){
						error("There cannot be two parameters with the same name.", DataCentricDSLPackage$Literals::FUNCTION__PARAMS)
					}
				}
			}
		}
	}
	
// Unable by default. Still leaving it here for later.
//		
//	@Check 
//	def checkForFunctionInFunction(Function fun){
//		val Array = fun.functionElements.toArray
//		for(i : 0..Array.length){
//			if(Array.get(i).equals(Function)){
//				error("You cannot write a function within a function", DataCentricDSLPackage$Literals::FUNCTION__FUNCTION_ELEMENTS)
//			}
//		}
//	}
}
