/*
 * generated by Xtext
 */
package org.validation

import org.dataCentricDSL.Condition
import org.dataCentricDSL.DataCentricDSL
import org.dataCentricDSL.DataCentricDSLPackage
import org.dataCentricDSL.ForStatement
import org.dataCentricDSL.FunctionCall
import org.dataCentricDSL.FunctionDecl
import org.dataCentricDSL.IfStatement
import org.dataCentricDSL.NumberLiteral
import org.dataCentricDSL.Query
import org.dataCentricDSL.StringLiteral
import org.dataCentricDSL.VariableCall
import org.dataCentricDSL.VariableDecl
import org.dataCentricDSL.WhileStatement
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DataCentricDSLValidator extends AbstractDataCentricDSLValidator {
	
	var boolean globalVariableFound = false;
	
//	@Check
//	def void checkIfQueryStringIsEmpty(Query que){
//		if(que.queryParam.toString.equals("")){
//			error("Query string cannot be empty.", DataCentricDSLPackage.Literals::QUERY__QUERY_PARAM);
//		}
//	}
	
	@Check
	def void checkConditionOperands(Condition c) {
		var leftOperand = c.expressions.get(0);
		var rightOperand = c.expressions.get(1);
		if(leftOperand instanceof NumberLiteral) {
			if(!(rightOperand instanceof NumberLiteral)) {
				error("Operands of incompatible types.", DataCentricDSLPackage.Literals::CONDITION__EXPRESSIONS)
			}
		}
		if(leftOperand instanceof StringLiteral) {
			if(!(rightOperand instanceof StringLiteral)) {
				error("Operands of incompatible types.", DataCentricDSLPackage.Literals::CONDITION__EXPRESSIONS)
			}
		}
	}
	
	@Check
	def void checkIfCalledFunctionExists(FunctionCall fc) {
		var container = fc.eContainer;
		while(!(container instanceof DataCentricDSL)) {
			container = container.eContainer;
		}
		
		val Elements = (container as DataCentricDSL).elements.toArray.filter(typeof(FunctionDecl));
		if(functionIsDeclared(Elements, fc.name)) {
			return;
		}
		
		error("Undefined function.", DataCentricDSLPackage.Literals::FUNCTION_CALL__NAME);
	}
	
	@Check
	def void checkIfAssignedVariableExists(VariableCall vc) {
		var container = vc.eContainer;
		var VariableDecl[] variables = null;
		while(!(container instanceof DataCentricDSL)) {
			container = container.eContainer;
			
			if(container instanceof IfStatement) {
				variables = (container as IfStatement).statements.toArray.filter(typeof(VariableDecl));
			} else if(container instanceof ForStatement) {
				variables = (container as ForStatement).statements.toArray.filter(typeof(VariableDecl));
				var DeclaratedVar = (container as ForStatement).forVar;
				if(DeclaratedVar.name.toString.equals(vc.variableCall.toString)) {
					return;
				}
			} else if(container instanceof WhileStatement) {
				variables = (container as WhileStatement).statements.toArray.filter(typeof(VariableDecl));
			} else if(container instanceof FunctionDecl) {
				variables = (container as FunctionDecl).statements.toArray.filter(typeof(VariableDecl));
				if(namePersistsInArray((container as FunctionDecl).arguments, vc.variableCall)) {
					return;
				}
			}
			if(variableIsDeclared(variables, vc.variableCall)) {
				return;
			}
			variables = null;
		}
		variables = (container as DataCentricDSL).elements.toArray.filter(typeof(VariableDecl));
		if(variableIsDeclared(variables, vc.variableCall)) {
			return;
		}
		checkIfCalledVariableIsGlobal(container, vc.variableCall);
		if(!globalVariableFound) {
			error("Undefined variable.", DataCentricDSLPackage.Literals::VARIABLE_CALL__VARIABLE_CALL);
		}
		globalVariableFound = false;
	}

	def void checkIfCalledVariableIsGlobal(EObject object, String name) {
		if(globalVariableFound) {
			return;
		}
		
		if(object instanceof DataCentricDSL || object instanceof IfStatement
			|| object instanceof ForStatement || object instanceof WhileStatement
			|| object instanceof FunctionDecl
		) {	
			if(variableIsDeclared(object.eContents.toArray
				.filter(typeof(VariableDecl)).filter[isGlobal], name
			)) {
				globalVariableFound = true;
				return;
			} else {
				for(i : 0..< object.eContents.length) {
					checkIfCalledVariableIsGlobal(object.eContents.get(i), name);
				}
			}
		} else if(object instanceof VariableDecl) {
			if((object as VariableDecl).isGlobal && (object as VariableDecl).name.equals(name)) {
				globalVariableFound = true;
				return;
			}
		}
	}

	def boolean variableIsDeclared(VariableDecl[] variables, String name) {
		if(variables != null) {
			for(i : 0..< variables.length) {
				if(variables.get(i).name.toString.equals(name)) {
					return true;
				}
			}
		}
		return false;
	}
	
	def boolean functionIsDeclared(FunctionDecl[] functions, String name) {
		for(i : 0..< functions.length) {
			if(functions.get(i).name.toString.equals(name)) {
				return true;
			}
		}
		return false;
	}
	
	def boolean namePersistsInArray(String[] array, String name) {
		for(i : 0..< array.length) {
			if(array.get(i).equals(name)) {
				return true;
			}
		}
		return false;
	}
}