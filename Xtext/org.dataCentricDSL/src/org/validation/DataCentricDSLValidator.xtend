/*
 * generated by Xtext
 */
package org.validation

import org.dataCentricDSL.Condition
import org.dataCentricDSL.DataCentricDSL
import org.dataCentricDSL.DataCentricDSLPackage
import org.dataCentricDSL.ForStatement
import org.dataCentricDSL.FunctionCall
import org.dataCentricDSL.FunctionDecl
import org.dataCentricDSL.IfStatement
import org.dataCentricDSL.NumberLiteral
import org.dataCentricDSL.StringLiteral
import org.dataCentricDSL.VariableCall
import org.dataCentricDSL.VariableDecl
import org.dataCentricDSL.WhileStatement
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DataCentricDSLValidator extends AbstractDataCentricDSLValidator {
	
	var boolean globalVariableFound = false;
	
//	@Check
//	def void checkIfQueryStringIsEmpty(QueryFunction que){
//		if(que.queryParam.toString.equals("")){
//			error("Query string cannot be empty.", DataCentricDSLPackage.Literals::QUERY__QUERY_PARAM);
//		}
//	}
	
	@Check
	def void checkConditionOperands(Condition c) {
		if(c.expressions.length > 1) {
			var leftOperand = c.expressions.get(0);
			var rightOperand = c.expressions.get(1);
			if(leftOperand instanceof NumberLiteral) {
				if(!(rightOperand instanceof NumberLiteral)) {
					error("Operands of incompatible types.", DataCentricDSLPackage.Literals::CONDITION__EXPRESSIONS)
				}
			}
			if(leftOperand instanceof StringLiteral) {
				if(!(rightOperand instanceof StringLiteral)) {
					error("Operands of incompatible types.", DataCentricDSLPackage.Literals::CONDITION__EXPRESSIONS)
				}
			}
		}
	}
	
	@Check
	def void checkIfCalledFunctionExists(FunctionCall fc) {
		var container = fc.eContainer;
		while(!(container instanceof DataCentricDSL)) {
			container = container.eContainer;
		}
		
		val elements = container.eContents.toArray.filter(typeof(FunctionDecl));
		if(functionIsDeclared(elements, fc.name)) {
			return;
		}
		
		error("Undefined function.", DataCentricDSLPackage.Literals::FUNCTION_CALL__NAME);
	}
	
	@Check
	def void checkIfADeclaredFunctionWithTheSameNameExists(FunctionDecl fd) {
		var functionDeclarations = fd.eContainer.eContents.toArray.filter(typeof(FunctionDecl));
		var indexOfThisFunctionDecl = fd.eContainer.eContents.indexOf(fd);
		for(i : 0..< functionDeclarations.length) {
			if(i != indexOfThisFunctionDecl) {
				if(fd.name.equals(functionDeclarations.get(i).name)) {
					error("A declared function with the same name already exists.",
						DataCentricDSLPackage.Literals::FUNCTION_DECL__NAME
					);
					return;
				}
			}
		}
	}
	
	@Check
	def void checkIfAssignedVariableExists(VariableCall vc) {
		var container = vc.eContainer;
		var VariableDecl[] variables = null;
		var EObject containerElement = vc.eContainer;
		var int containerElementIndex;
		while(!(container instanceof DataCentricDSL)) {
			container = container.eContainer;
			
			if(container instanceof IfStatement || container instanceof ForStatement
				|| container instanceof WhileStatement || container instanceof FunctionDecl) {
				
				if(container instanceof ForStatement) {
					var DeclaratedVar = (container as ForStatement).forVar;
					if(DeclaratedVar.name.toString.equals(vc.variableCall.toString)) {
						return;
					}
				}
				if(container instanceof WhileStatement) {
					if(namePersistsInArray((container as FunctionDecl).arguments, vc.variableCall)) {
						return;
					}
				}
				containerElementIndex = container.eContents.indexOf(containerElement);
				variables = container.eContents.subList(0, containerElementIndex).toArray.filter(typeof(VariableDecl));
				if(variableIsDeclared(variables, vc.variableCall)) {
					return;
				}
				variables = null;
			}
			if(!(containerElement.eContainer instanceof DataCentricDSL)) {
				containerElement = containerElement.eContainer;
			}
		}
		containerElementIndex = container.eContents.indexOf(containerElement);
		variables = container.eContents.subList(0, containerElementIndex).toArray.filter(typeof(VariableDecl));
		if(variableIsDeclared(variables, vc.variableCall)) {
			return;
		}
		checkIfCalledVariableIsGlobal(container, vc.variableCall, containerElementIndex);
		if(!globalVariableFound) {
			error("Undefined variable.", DataCentricDSLPackage.Literals::VARIABLE_CALL__VARIABLE_CALL);
		}
		globalVariableFound = false;
	}

	def void checkIfCalledVariableIsGlobal(EObject object, String name, int index) {
		if(globalVariableFound) {
			return;
		}
		if(object instanceof DataCentricDSL || object instanceof IfStatement
			|| object instanceof ForStatement || object instanceof WhileStatement
			|| object instanceof FunctionDecl
		) {	
			var int lastIndex;
			var variableFound = false;
			if(object instanceof DataCentricDSL) {
				lastIndex = index;
				variableFound = variableIsDeclared(object.eContents.subList(0, lastIndex).toArray
									.filter(typeof(VariableDecl)).filter[isGlobal], name)
			} else {
				lastIndex = object.eContents.length;
				variableFound = variableIsDeclared(object.eContents.toArray
									.filter(typeof(VariableDecl)).filter[isGlobal], name);
			}
			if(variableFound) {
				globalVariableFound = true;
				return;
			} else {
				for(i : 0..< lastIndex) {
					checkIfCalledVariableIsGlobal(object.eContents.get(i), name, -1);
				}
			}
		} else if(object instanceof VariableDecl) {
			if((object as VariableDecl).isGlobal && (object as VariableDecl).name.equals(name)) {
				globalVariableFound = true;
				return;
			}
		}
	}

	def boolean variableIsDeclared(VariableDecl[] variables, String name) {
		if(variables != null) {
			for(i : 0..< variables.length) {
				if(variables.get(i).name.toString.equals(name)) {
					return true;
				}
			}
		}
		return false;
	}
	
	def boolean functionIsDeclared(FunctionDecl[] functions, String name) {
		for(i : 0..< functions.length) {
			if(functions.get(i).name.toString.equals(name)) {
				return true;
			}
		}
		return false;
	}
	
	def boolean namePersistsInArray(String[] array, String name) {
		for(i : 0..< array.length) {
			if(array.get(i).equals(name)) {
				return true;
			}
		}
		return false;
	}
}