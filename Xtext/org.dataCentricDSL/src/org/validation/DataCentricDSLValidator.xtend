/*
 * generated by Xtext
 */
package org.validation

import org.dataCentricDSL.DataCentricDSL
import org.dataCentricDSL.DataCentricDSLPackage
import org.dataCentricDSL.Query
import org.dataCentricDSL.VariableCall
import org.dataCentricDSL.VariableDecl
import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DataCentricDSLValidator extends AbstractDataCentricDSLValidator {
	
	@Check
	def void checkIfQueryStringIsEmpty(Query que){
		if(que.queryValue.toString.equals("")){
			error("Query string cannot be empty.", DataCentricDSLPackage.Literals::QUERY__QUERY_VALUE);
		}
	}

	@Check
	def void checkIfAssignedVariableExists(VariableCall vc) {
		var Array = vc.eContainer;
		while(!(Array instanceof DataCentricDSL)) {
			Array = Array.eContainer;
		}
		val Elements = (Array as DataCentricDSL).elements.toArray.filter(typeof(VariableDecl));
		var found = 0;
		if(Elements.length > 1) {
			for(i : 0..< Elements.length) {
				if(found == 0) {
					if(Elements.get(i).name.toString.equals(vc.variableCall.toString)) {
						found = 1;
					}
				} else {
					return;
				}
			}
		} else {
			error("Undefined variable.", DataCentricDSLPackage.Literals::VARIABLE_CALL__VARIABLE_CALL);
			return;
		}	
		if(found == 0) {
			error("Undefined variable.", DataCentricDSLPackage.Literals::VARIABLE_CALL__VARIABLE_CALL);
		}
	}

}