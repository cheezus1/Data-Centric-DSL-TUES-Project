/*
 * generated by Xtext
 */
package org.validation

import org.dataCentricDSL.Condition
import org.dataCentricDSL.DataCentricDSL
import org.dataCentricDSL.DataCentricDSLPackage
import org.dataCentricDSL.ForStatement
import org.dataCentricDSL.FunctionCall
import org.dataCentricDSL.FunctionDecl
import org.dataCentricDSL.IfStatement
import org.dataCentricDSL.VariableCall
import org.dataCentricDSL.VariableDecl
import org.dataCentricDSL.WhileStatement
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check

import static org.validation.ValidationUtils.*

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DataCentricDSLValidator extends AbstractDataCentricDSLValidator {
	
	@Check
	def void checkFunctionDeclarationPosition(FunctionDecl fd) {
		if(!(fd.eContainer instanceof DataCentricDSL)) {
			error("Functions cannot be declared within block statements.",
				DataCentricDSLPackage.Literals::FUNCTION_DECL__NAME
			);
			return;
			
		} else {
			if(!ValidationUtils.functionIsDeclaredBeforeTheCode(fd)) {
				error("Functions must be declared at the beginning of the code.",
					DataCentricDSLPackage.Literals::FUNCTION_DECL__NAME
				);
				return;
			}
			
			if(ValidationUtils.functionWithTheSameNameExists(fd)) {
				error("Function with the same name already exists.",
					DataCentricDSLPackage.Literals::FUNCTION_DECL__NAME
				);
				return;
			}
		}
	}
	
	@Check
	def void checkConditionElementCompatibility(Condition c) {
		if(c.conditionElements.length > 1) {
			var leftOperand = c.conditionElements.get(0);
			var rightOperand = c.conditionElements.get(1);
			
			if(!ValidationUtils.checkOperandsCompatibility(leftOperand, rightOperand)) {
				error("Operands of incompatible types.", DataCentricDSLPackage.Literals::CONDITION__CONDITION_ELEMENTS);	
			}
		}
	}
	
	@Check
	def void checkIfCalledFunctionExists(FunctionCall fc) {
		var container = fc.eContainer;
		while(!(container instanceof DataCentricDSL)) {
			container = container.eContainer;
		}
		
		val elements = container.eContents.toArray.filter(typeof(FunctionDecl));
		if(ValidationUtils.functionIsDeclared(elements, fc.name)) {
			return;
		}
		
		error("Undefined function.", DataCentricDSLPackage.Literals::FUNCTION_CALL__NAME);
	}
	
	@Check
	def void checkIfAssignedVariableExists(VariableCall vc) {
		var container = vc.eContainer;
		var VariableDecl[] variables = null;
		var EObject containerElement = vc.eContainer;
		var int containerElementIndex;
		while(!(container instanceof DataCentricDSL)) {
			container = container.eContainer;
			
			if(container instanceof IfStatement || container instanceof ForStatement
				|| container instanceof WhileStatement || container instanceof FunctionDecl) {
				
				if(container instanceof ForStatement) {
					var DeclaratedVar = (container as ForStatement).forVar;
					if(DeclaratedVar.name.toString.equals(vc.variableCall.toString)) {
						return;
					}
				}
				if(container instanceof FunctionDecl) {
					if(ValidationUtils.namePersistsInArray((container as FunctionDecl).arguments, vc.variableCall)) {
						return;
					}
				}
				containerElementIndex = container.eContents.indexOf(containerElement);
				variables = container.eContents.subList(0, containerElementIndex).toArray.filter(typeof(VariableDecl));
				if(ValidationUtils.variableIsDeclared(variables, vc.variableCall)) {
					return;
				}
				variables = null;
			}
			if(!(containerElement.eContainer instanceof DataCentricDSL)) {
				containerElement = containerElement.eContainer;
			}
		}
		containerElementIndex = container.eContents.indexOf(containerElement);
		variables = container.eContents.subList(0, containerElementIndex).toArray.filter(typeof(VariableDecl));
		if(ValidationUtils.variableIsDeclared(variables, vc.variableCall)) {
			return;
		}
		ValidationUtils.checkIfCalledVariableIsGlobal(container, vc.variableCall, containerElementIndex);
		if(!ValidationUtils.globalVariableFound) {
			error("Undefined variable.", DataCentricDSLPackage.Literals::VARIABLE_CALL__VARIABLE_CALL);
		}
		ValidationUtils.globalVariableFound = false;
	}
}