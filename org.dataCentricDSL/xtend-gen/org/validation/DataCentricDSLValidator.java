/**
 * generated by Xtext
 */
package org.validation;

import com.google.common.base.Objects;
import org.dataCentricDSL.DataCentricDSLPackage;
import org.dataCentricDSL.Function;
import org.dataCentricDSL.Query;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.validation.AbstractDataCentricDSLValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class DataCentricDSLValidator extends AbstractDataCentricDSLValidator {
  @Check
  public void checkIfQueryIsEmpty(final Query que) {
    EList<String> _queryParams = que.getQueryParams();
    String _string = _queryParams.toString();
    boolean _equals = _string.equals("[]");
    if (_equals) {
      this.error("Query string cannot be empty!", DataCentricDSLPackage.Literals.QUERY__QUERY_PARAMS);
    }
  }
  
  @Check
  public void checkIfFunctionParametersAreUnique(final Function fun) {
    EList<JvmFormalParameter> _params = fun.getParams();
    final Object[] Array = _params.toArray();
    int _length = Array.length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
    for (final Integer i : _doubleDotLessThan) {
      int _length_1 = Array.length;
      ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(1, _length_1, true);
      for (final Integer i1 : _doubleDotLessThan_1) {
        boolean _notEquals = (!Objects.equal(i, i1));
        if (_notEquals) {
          Object _get = Array[(i).intValue()];
          String _string = _get.toString();
          Object _get_1 = Array[(i1).intValue()];
          String _string_1 = _get_1.toString();
          boolean _equals = _string.equals(_string_1);
          if (_equals) {
            this.error("There cannot be two parameters with the same name!", DataCentricDSLPackage.Literals.FUNCTION__PARAMS);
          }
        }
      }
    }
  }
}
